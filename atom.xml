<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>mubai</title>
  
  <subtitle>mubaiのBlog</subtitle>
  <link href="https://zfengchen.github.io/atom.xml" rel="self"/>
  
  <link href="https://zfengchen.github.io/"/>
  <updated>2021-12-27T14:42:25.478Z</updated>
  <id>https://zfengchen.github.io/</id>
  
  <author>
    <name>mubai</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基于vue的音乐盒</title>
    <link href="https://zfengchen.github.io/posts/13.html"/>
    <id>https://zfengchen.github.io/posts/13.html</id>
    <published>2021-12-27T23:30:59.000Z</published>
    <updated>2021-12-27T14:42:25.478Z</updated>
    
    
    
    
    <category term="学习" scheme="https://zfengchen.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="项目" scheme="https://zfengchen.github.io/categories/%E5%AD%A6%E4%B9%A0/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="技术" scheme="https://zfengchen.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="前端" scheme="https://zfengchen.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://zfengchen.github.io/tags/Vue/"/>
    
    <category term="Ajax" scheme="https://zfengchen.github.io/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title>基于vue的天气预报</title>
    <link href="https://zfengchen.github.io/posts/12.html"/>
    <id>https://zfengchen.github.io/posts/12.html</id>
    <published>2021-12-27T23:00:14.000Z</published>
    <updated>2021-12-27T14:41:55.142Z</updated>
    
    
    
    
    <category term="学习" scheme="https://zfengchen.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="项目" scheme="https://zfengchen.github.io/categories/%E5%AD%A6%E4%B9%A0/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="技术" scheme="https://zfengchen.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="前端" scheme="https://zfengchen.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://zfengchen.github.io/tags/Vue/"/>
    
    <category term="Ajax" scheme="https://zfengchen.github.io/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title>PC端网页特效</title>
    <link href="https://zfengchen.github.io/posts/11.html"/>
    <id>https://zfengchen.github.io/posts/11.html</id>
    <published>2021-12-27T12:24:14.000Z</published>
    <updated>2021-12-27T14:32:24.064Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol><li>元素偏移量 offset 系列</li><li>元素可视区 client 系列</li><li>元素滚动 scroll 系列</li><li>动画函数封装</li><li>常见网页特效案例</li></ol><h2 id="1-元素偏移量-offset-系列"><a href="#1-元素偏移量-offset-系列" class="headerlink" title="1. 元素偏移量 offset 系列"></a>1. 元素偏移量 offset 系列</h2><ul><li><p><strong>1.1 offset 概述</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-0b1583e6ca4cee792.png" alt="Untitled-0b1583e6ca4cee792.png"></p></li><li><p><strong>1.2 offset 与 style 区别</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-1795cc27769d790f0.png" alt="Untitled-1795cc27769d790f0.png"></p></li><li><p><strong>案例</strong></p><ul><li><p><strong>获取鼠标在盒子内的坐标</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-26c1b84a4abb4976a.png" alt="Untitled-26c1b84a4abb4976a.png"></p>  <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>box<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mousemove'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> x <span class="token operator">=</span> e<span class="token punctuation">.</span>pageX <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>offsetLeft<span class="token punctuation">;</span><span class="token keyword">var</span> y <span class="token operator">=</span> e<span class="token punctuation">.</span>pageY <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>offsetTop<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'x坐标是'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">' y坐标是'</span> <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>模态框拖拽</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-3a10fff5b439d7e42.png" alt="Untitled-3a10fff5b439d7e42.png"></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-4d7143516aa33ecac.png" alt="Untitled-4d7143516aa33ecac.png"></p>  <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 1. 获取元素</span>        <span class="token keyword">var</span> login <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.login'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> mask <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.login-bg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> link <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#link'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> closeBtn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#closeBtn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> title <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#title'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 2. 点击弹出层这个链接 link  让mask 和login 显示出来</span>        link<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                mask<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'block'</span><span class="token punctuation">;</span>                login<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'block'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token comment">// 3. 点击 closeBtn 就隐藏 mask 和 login </span>        closeBtn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                mask<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span><span class="token punctuation">;</span>                login<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token comment">// 4. 开始拖拽</span>            <span class="token comment">// (1) 当我们鼠标按下， 就获得鼠标在盒子内的坐标</span>        title<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mousedown'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> x <span class="token operator">=</span> e<span class="token punctuation">.</span>pageX <span class="token operator">-</span> login<span class="token punctuation">.</span>offsetLeft<span class="token punctuation">;</span>            <span class="token keyword">var</span> y <span class="token operator">=</span> e<span class="token punctuation">.</span>pageY <span class="token operator">-</span> login<span class="token punctuation">.</span>offsetTop<span class="token punctuation">;</span>            <span class="token comment">// (2) 鼠标移动的时候，把鼠标在页面中的坐标，减去 鼠标在盒子内的坐标就是模态框的left和top值</span>            document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mousemove'</span><span class="token punctuation">,</span> move<span class="token punctuation">)</span>            <span class="token keyword">function</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                login<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> e<span class="token punctuation">.</span>pageX <span class="token operator">-</span> x <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>                login<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> e<span class="token punctuation">.</span>pageY <span class="token operator">-</span> y <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// (3) 鼠标弹起，就让鼠标移动事件移除</span>            document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mouseup'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                document<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'mousemove'</span><span class="token punctuation">,</span> move<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>仿京东放大镜</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-591793a0b2aefcf46.png" alt="Untitled-591793a0b2aefcf46.png"></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-62e609bf502c2a3be.png" alt="Untitled-62e609bf502c2a3be.png"></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-786cd6471201b2104.png" alt="Untitled-786cd6471201b2104.png"></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-8a3a0c566fd57533b.png" alt="Untitled-8a3a0c566fd57533b.png"></p></li></ul></li></ul><h2 id="2-元素可视区-client-系列"><a href="#2-元素可视区-client-系列" class="headerlink" title="2. 元素可视区 client 系列"></a>2. 元素可视区 client 系列</h2><ul><li><p><strong>2.2 client 系列的相关属性</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-9a1e2d21c88c29805.png" alt="Untitled-9a1e2d21c88c29805.png"></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-108c37851950d75696.png" alt="Untitled-108c37851950d75696.png"></p></li><li><p><strong>案例</strong></p><p>  <a href="https://www.notion.so/flexible-js-69346dc7d38044cdab9aeecdfda29f3f"><strong>淘宝 flexible.js 源码分析</strong></a></p><p>  <a href="https://www.notion.so/25e460852eb049de9e9307c07b4e44f2">仿淘宝固定右侧侧边栏</a></p></li></ul><h2 id="3-元素滚动-scroll-系列"><a href="#3-元素滚动-scroll-系列" class="headerlink" title="3. 元素滚动 scroll 系列"></a>3. 元素滚动 scroll 系列</h2><ul><li><p><strong>3.1 元素 scroll 系列属性</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-1117def1ae57cd58b6.png" alt="Untitled-1117def1ae57cd58b6.png"></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-123a533605d51cfa6f.png" alt="Untitled-123a533605d51cfa6f.png"></p></li><li><p><strong>3.2 页面被卷去的头部</strong></p><p>  如果浏览器的高（或宽）度不足以显示整个页面时，会自动出现滚动条。当滚动条向下滚动时，页面上面被隐藏</p></li><li><p><strong>3.3 页面被卷去的头部兼容性解决方案</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-13941ed433c1abc652.png" alt="Untitled-13941ed433c1abc652.png"></p></li><li><p><strong>案例</strong></p></li></ul><h2 id="三大系列总结"><a href="#三大系列总结" class="headerlink" title="三大系列总结"></a>三大系列总结</h2><ul><li><p><strong>三大系列区别</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-144b3be40caafd3a26.png" alt="Untitled-144b3be40caafd3a26.png"></p><ul><li><p>他们主要用法：</p><ol><li><p>offset系列 经常用于获得元素位置 offsetLeft offsetTop</p></li><li><p>client 经常用于获取元素大小 clientWidth clientHeight</p></li><li><p>scroll 经常用于获取滚动距离 scrollTop scrollLeft</p></li><li><p>注意页面滚动的距离通过 window.pageXOffset 获得</p></li></ol></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;元素偏移量 offset 系列&lt;/li&gt;
&lt;li&gt;元素可视区 client 系列&lt;/li&gt;
&lt;li&gt;元素滚动 scroll 系列</summary>
      
    
    
    
    <category term="笔记" scheme="https://zfengchen.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="技术" scheme="https://zfengchen.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="前端" scheme="https://zfengchen.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Javascript" scheme="https://zfengchen.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>事件高级</title>
    <link href="https://zfengchen.github.io/posts/10.html"/>
    <id>https://zfengchen.github.io/posts/10.html</id>
    <published>2021-12-27T12:23:45.000Z</published>
    <updated>2021-12-27T14:32:22.965Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-注册事件（绑定事件）"><a href="#1-注册事件（绑定事件）" class="headerlink" title="1. 注册事件（绑定事件）"></a><strong>1. 注册事件（绑定事件）</strong></h1><ul><li><p>1.1 注册事件概述<br>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled.png" alt="Untitled.png"></p></li><li><p>1.2 addEventListener 事件监听方式（重点）<br>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-1.png" alt="Untitled-1.png"></p></li><li><p>1.3 attachEvent 事件监听方式（了解）<br>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-2.png" alt="Untitled-2.png"></p></li><li><p>1.4 注册事件兼容性解决方案（了解）</p><p>  兼容性处理的原则： 首先照顾大多数浏览器，再处理特殊浏览器</p>  <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> eventName<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 判断当前浏览器是否支持 addEventListener 方法</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>addEventListener<span class="token punctuation">)</span> <span class="token punctuation">{</span> element<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>eventName<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 第三个参数 默认是false</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>attachEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span> element<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">'on'</span> <span class="token operator">+</span> eventName<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// 相当于 element.onclick = fn;</span> element<span class="token punctuation">[</span><span class="token string">'on'</span> <span class="token operator">+</span> eventName<span class="token punctuation">]</span> <span class="token operator">=</span> fn<span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="2-删除事件（解绑事件）"><a href="#2-删除事件（解绑事件）" class="headerlink" title="2. 删除事件（解绑事件）"></a>2. 删除事件（解绑事件）</h1><ul><li><p>2.1 删除事件的方式</p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-3.png" alt="Untitled-3.png"></p></li><li><p>2.2 删除事件兼容性解决方案（了解）</p>  <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> eventName<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 判断当前浏览器是否支持 removeEventListener 方法</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>removeEventListener<span class="token punctuation">)</span> <span class="token punctuation">{</span> element<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span>eventName<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 第三个参数 默认是false</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>detachEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span> element<span class="token punctuation">.</span><span class="token function">detachEvent</span><span class="token punctuation">(</span><span class="token string">'on'</span> <span class="token operator">+</span> eventName<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> element<span class="token punctuation">[</span><span class="token string">'on'</span> <span class="token operator">+</span> eventName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="3-DOM-事件流"><a href="#3-DOM-事件流" class="headerlink" title="3. DOM 事件流"></a><strong>3. DOM 事件流</strong></h1><ul><li><p>DOM 事件流</p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-4.png" alt="Untitled-4.png"></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-5.png" alt="Untitled-5.png"></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-6.png" alt="Untitled-6.png"></p></li></ul><h1 id="4-事件对象"><a href="#4-事件对象" class="headerlink" title="4. 事件对象"></a>4. 事件对象</h1><ul><li><p>4.1 什么是事件对象</p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-7.png" alt="Untitled-7.png"></p></li><li><p>4.2 事件对象的使用语法</p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-8.png" alt="Untitled-8.png"></p></li><li><p>4.3 事件对象的兼容性方案</p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-9.png" alt="Untitled-9.png"></p></li><li><p>4.4 事件对象的常见属性和方法</p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-10.png" alt="Untitled-10.png"></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-11.png" alt="Untitled-11.png"></p></li></ul><h1 id="5-阻止事件冒泡"><a href="#5-阻止事件冒泡" class="headerlink" title="5. 阻止事件冒泡"></a><strong>5. 阻止事件冒泡</strong></h1><ul><li><p>5.1 阻止事件冒泡的两种方式</p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-12.png" alt="Untitled-12.png"></p></li><li><p>5.2 阻止事件冒泡的兼容性解决方案</p>  <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">if</span><span class="token punctuation">(</span>e <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span>stopPropagation<span class="token punctuation">)</span><span class="token punctuation">{</span> e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span> window<span class="token punctuation">.</span>event<span class="token punctuation">.</span>cancelBubble <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="6-事件委托（代理、委派）"><a href="#6-事件委托（代理、委派）" class="headerlink" title="6. 事件委托（代理、委派）"></a>6. 事件委托（代理、委派）</h1><ul><li><p>事件委托</p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-13.png" alt="Untitled-13.png"></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-14.png" alt="Untitled-14.png"></p></li><li><p>案例</p>  <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 事件委托的核心原理：给父节点添加侦听器， 利用事件冒泡影响每一个子节点</span>        <span class="token keyword">var</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ul<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// alert('知否知否，点我应有弹框在手！');</span>            <span class="token comment">// e.target 这个可以得到我们点击的对象</span>            e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">'pink'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="7-常用的鼠标事件"><a href="#7-常用的鼠标事件" class="headerlink" title="7. 常用的鼠标事件"></a>7. 常用的鼠标事件</h1><ul><li><p>7.1 常用的鼠标事件</p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-15.png" alt="Untitled-15.png"></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-16.png" alt="Untitled-16.png"></p></li><li><p>7.2 鼠标事件对象</p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-17.png" alt="Untitled-17.png"></p></li></ul><h1 id="8-常用的键盘事件"><a href="#8-常用的键盘事件" class="headerlink" title="8. 常用的键盘事件"></a>8. 常用的键盘事件</h1><ul><li><p>8.1 常用键盘事件</p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-18.png" alt="Untitled-18.png"></p></li><li><p>8.2 键盘事件对象</p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-19.png" alt="Untitled-19.png"></p></li><li><p>8.3 ASCII 表</p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-20.png" alt="Untitled-20.png"></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-注册事件（绑定事件）&quot;&gt;&lt;a href=&quot;#1-注册事件（绑定事件）&quot; class=&quot;headerlink&quot; title=&quot;1. 注册事件（绑定事件）&quot;&gt;&lt;/a&gt;&lt;strong&gt;1. 注册事件（绑定事件）&lt;/strong&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1.</summary>
      
    
    
    
    <category term="笔记" scheme="https://zfengchen.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="技术" scheme="https://zfengchen.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="前端" scheme="https://zfengchen.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Javascript" scheme="https://zfengchen.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>DOM文档对象模型</title>
    <link href="https://zfengchen.github.io/posts/9.html"/>
    <id>https://zfengchen.github.io/posts/9.html</id>
    <published>2021-12-27T12:23:05.000Z</published>
    <updated>2021-12-27T14:32:32.060Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-DOM-简介"><a href="#1-DOM-简介" class="headerlink" title="1. DOM 简介"></a>1. DOM 简介</h1><ul><li><p><strong>1.1 什么是 DOM</strong></p><p>  文档对象模型（Document Object Model，简称 DOM），是 W3C 组织推荐的处理可扩展标记语言（HTML或者XML）的标准编程接口。</p><p>  W3C 已经定义了一系列的 DOM 接口，通过这些 DOM 接口可以改变网页的内容、结构和样式。</p></li><li><p><strong>1.2 DOM 树</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-0.png" alt="Untitled-0.png"></p></li></ul><h1 id="2-获取元素"><a href="#2-获取元素" class="headerlink" title="2. 获取元素"></a>2. 获取元素</h1><ul><li><p><strong>2.1 如何获取页面元素</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-1136fee93e0665545.png" alt="Untitled-1136fee93e0665545.png"></p></li><li><p><strong>2.2 根据 ID 获取</strong></p><p>  document.getElementById(‘id’);</p><p>  使用 console.dir() 可以打印我们获取的元素对象，更好的查看对象里面的属性和方法。</p></li><li><p><strong>2.3 根据标签名获取</strong></p><p>  document.getElementsByTagName(‘标签名’);</p><p>  注：使用 getElementsByTagName() 方法可以返回带有指定标签名的<strong>对象的集合</strong></p><p>  1.因为得到的是一个对象的集合，所以我们想要操作里面的元素就需要遍历。</p><p>  2.得到元素对象是动态的</p></li><li><p><strong>2.4 通过 HTML5 新增的方法获取</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-2abb35f958945dd1f.png" alt="Untitled-2abb35f958945dd1f.png"></p></li><li><p><strong>2.5 获取特殊元素（body，html）</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-38ef8d1a9652f40dd.png" alt="Untitled-38ef8d1a9652f40dd.png"></p></li></ul><h1 id="3-事件基础"><a href="#3-事件基础" class="headerlink" title="3. 事件基础"></a>3. 事件基础</h1><ul><li><p><strong>3.1 事件概述</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-465e7a6bb7436ff65.png" alt="Untitled-465e7a6bb7436ff65.png"></p></li><li><p><strong>3.2 事件三要素</strong></p><ol><li><p>事件源 （谁）</p></li><li><p>事件类型 （什么事件）</p></li><li><p>事件处理程序 （做啥）</p></li></ol></li><li><p><strong>3.3 执行事件的步骤</strong></p><ol><li><p>获取事件源</p></li><li><p>注册事件（绑定事件）</p></li><li><p>添加事件处理程序（采取函数赋值形式）</p></li></ol></li><li><p><strong>3.3常见的鼠标事件</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-5b9aa3dbd1480df3f.png" alt="Untitled-5b9aa3dbd1480df3f.png"></p></li></ul><h1 id="4-操作元素"><a href="#4-操作元素" class="headerlink" title="4. 操作元素"></a>4. 操作元素</h1><ul><li><p><strong>4.1 改变元素内容</strong></p><p>  <strong>常用的是element.innerHTML</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-6b10c34d9d3761331.png" alt="Untitled-6b10c34d9d3761331.png"></p></li><li><p><strong>4.2 常用元素的属性操作</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-7a84f512b4d79481d.png" alt="Untitled-7a84f512b4d79481d.png"></p></li><li><p><strong>4.3 表单元素的属性操作</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-8181271e166816396.png" alt="Untitled-8181271e166816396.png"></p></li><li><p><strong>4.4 样式属性操作</strong></p><ul><li><p><strong>操作元素的方法</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-8181271e166816396.png" alt="Untitled-8181271e166816396.png"></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-9e6772b85634bad0b.png" alt="Untitled-9e6772b85634bad0b.png"></p></li><li><p><strong>操作元素总结</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-10776fa11de24cda9e.png" alt="Untitled-10776fa11de24cda9e.png"></p></li></ul></li><li><p><strong>4.5 排他思想</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-1255e7f3c929f6c7bf.png" alt="Untitled-1255e7f3c929f6c7bf.png"></p></li><li><p><strong>4.6 自定义属性的操作</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-130f8225ebba282595.png" alt="Untitled-130f8225ebba282595.png"></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-1424cd4ef88357c118.png" alt="Untitled-1424cd4ef88357c118.png"></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-15ad4c71f93e8c99bf.png" alt="Untitled-15ad4c71f93e8c99bf.png"></p></li><li><p><strong>4.7 H5自定义属性</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-161a9a35fa5160f642.png" alt="Untitled-161a9a35fa5160f642.png"></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-1736d5a758f28fab2b.png" alt="Untitled-1736d5a758f28fab2b.png"></p></li><li><p><strong>案例</strong></p></li></ul><h1 id="5-节点操作"><a href="#5-节点操作" class="headerlink" title="5. 节点操作"></a>5. 节点操作</h1><ul><li><p><strong>5.1 为什么学节点操作</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-189c78cc1560c30c25.png" alt="Untitled-189c78cc1560c30c25.png"></p></li><li><p><strong>5.2 节点概述</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-199745832be4cafb83.png" alt="Untitled-199745832be4cafb83.png"></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-205fad0cc3bc4610c9.png" alt="Untitled-205fad0cc3bc4610c9.png"></p></li><li><p><strong>5.3 节点层级</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-21.png" alt="Untitled-21.png"></p><ul><li><p><strong>父级节点</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-22.png" alt="Untitled-22.png"></p></li><li><p><strong>子节点</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-23.png" alt="Untitled-23.png"></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-24.png" alt="Untitled-24.png"></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-25.png" alt="Untitled-25.png"></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-26.png" alt="Untitled-26.png"></p></li><li><p><strong>兄弟节点</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-27.png" alt="Untitled-27.png"></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-28.png" alt="Untitled-28.png"></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-29.png" alt="Untitled-29.png"></p></li></ul></li><li><p><strong>5.4 创建、添加、删除、复制节点</strong></p><ul><li><p><strong>创建节点</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-30.png" alt="Untitled-30.png"></p></li><li><p><strong>添加节点</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-31.png" alt="Untitled-31.png"></p></li><li><p><strong>删除节点</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-32.png" alt="Untitled-32.png"></p></li><li><p><strong>复制节点(克隆节点)</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-33.png" alt="Untitled-33.png"></p></li></ul></li><li><p><strong>5.5 三种动态创建元素区别</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-34.png" alt="Untitled-34.png"></p></li><li><p><strong>案例</strong></p></li></ul><h1 id="6-DOM-重点核心"><a href="#6-DOM-重点核心" class="headerlink" title="6. DOM 重点核心"></a>6. DOM 重点核心</h1><p><strong>关于dom操作，我们主要针对于元素的操作。主要有创建、增、删、改、查、属性操作、事件操作。</strong></p><ul><li><p><strong>6.1 创建</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-35.png" alt="Untitled-35.png"></p></li><li><p><strong>6.2 增</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-36.png" alt="Untitled-36.png"></p></li><li><p><strong>6.3 删</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-37.png" alt="Untitled-37.png"></p></li><li><p><strong>6.4 改</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-38.png" alt="Untitled-38.png"></p></li><li><p><strong>6.5 查</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-39.png" alt="Untitled-39.png"></p></li><li><p><strong>6.6 属性操作</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-40.png" alt="Untitled-40.png"></p></li><li><p><strong>6.7 事件操作</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-41.png" alt="Untitled-41.png"></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-DOM-简介&quot;&gt;&lt;a href=&quot;#1-DOM-简介&quot; class=&quot;headerlink&quot; title=&quot;1. DOM 简介&quot;&gt;&lt;/a&gt;1. DOM 简介&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;1.1 什么是 DOM&lt;/strong&gt;&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    <category term="笔记" scheme="https://zfengchen.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="技术" scheme="https://zfengchen.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="前端" scheme="https://zfengchen.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Javascript" scheme="https://zfengchen.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>BOM浏览器对象模型</title>
    <link href="https://zfengchen.github.io/posts/8.html"/>
    <id>https://zfengchen.github.io/posts/8.html</id>
    <published>2021-12-27T12:21:53.000Z</published>
    <updated>2021-12-27T14:32:38.365Z</updated>
    
    <content type="html"><![CDATA[<h2 id="BOM特性"><a href="#BOM特性" class="headerlink" title="BOM特性"></a><strong>BOM特性</strong></h2><pre><code>浏览器对象模型把「浏览器」当做一个「对象」来看待BOM 的顶级对象是 windowBOM 学习的是浏览器窗口交互的一些对象BOM 是浏览器厂商在各自浏览器上定义的，兼容性较差</code></pre><h2 id="BOM构成"><a href="#BOM构成" class="headerlink" title="BOM构成"></a><strong>BOM构成</strong></h2><p><img src="https://www.ipicbed.com/images/2021/12/27/bom1.png" alt="bom1.png"></p><h2 id="BOM的各类方法（重点）"><a href="#BOM的各类方法（重点）" class="headerlink" title="BOM的各类方法（重点）"></a><strong>BOM的各类方法（重点）</strong></h2><ul><li><p>定时器</p><ul><li><p>setTimeout()</p>  <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>调用函数<span class="token punctuation">,</span> <span class="token punctuation">[</span>延迟的毫秒数<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  setTimeout() 这个调用函数我们也称为回调函数 callback<br>  普通函数是按照代码顺序直接调用。<br>  而这个函数，需要等待时间，时间到了才去调用这个函数，因此称为回调函数。<br>  简单理解： 回调，就是回头调用的意思。上一件事干完，再回头再调用这个函数。<br>  以前我们讲的 element.onclick = function(){} 或者 element.addEventListener(“click”, fn); 里面的 函数也是回调<br>  函数。</p></li><li><p>停止 setTimeout() 定时器</p>  <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">window<span class="token punctuation">.</span><span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeoutID<span class="token punctuation">)</span><span class="token comment">//clearTimeout()方法取消了先前通过调用 setTimeout() 建立的定时器。</span><span class="token comment">//注意：</span><span class="token comment">//1. window 可以省略。</span><span class="token comment">//2. 里面的参数就是定时器的标识符 。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>setInterval()</p>  <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">window<span class="token punctuation">.</span><span class="token function">setInterval</span><span class="token punctuation">(</span>回调函数<span class="token punctuation">,</span> <span class="token punctuation">[</span>间隔的毫秒数<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  setInterval() 方法重复调用一个函数，每隔这个时间，就去调用一次回调函数。</p><p>  <strong>注意：</strong></p><ol><li><p>window 可以省略。</p></li><li><p>这个调用函数可以直接写函数，或者写函数名或者采取字符串 ‘函数名()’ 三种形式。</p></li><li><p>间隔的毫秒数省略默认是 0，如果写，必须是毫秒，表示每隔多少毫秒就自动调用这个函数。</p></li><li><p>因为定时器可能有很多，所以我们经常给定时器赋值一个标识符。</p></li><li><p>第一次执行也是间隔毫秒数之后执行，之后每隔毫秒数就执行一次。</p></li></ol></li><li><p>停止 setInterval() 定时器</p>  <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">window<span class="token punctuation">.</span><span class="token function">clearInterval</span><span class="token punctuation">(</span>intervalID<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//clearInterval()方法取消了先前通过调用 setInterval()建立的定时器。</span><span class="token comment">//注意：</span><span class="token comment">//1. window 可以省略。</span><span class="token comment">//2. 里面的参数就是定时器的标识符 。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><pre><code>setTimeout()和setInterval()的区别setTimeout()只执行一次setInterval()会重复执行</code></pre><h2 id="BOM重点案例"><a href="#BOM重点案例" class="headerlink" title="BOM重点案例"></a><strong>BOM重点案例</strong></h2><ul><li><p>5秒后自动关闭的广告—setTimeout()</p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/bomtext01.png" alt="bomtext01.png"></p>  <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> ad <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.ad'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//ad为广告图片的类名</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ad<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>倒计时—setInterval()</p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/bomtext02.png" alt="bomtext02.png"></p>  <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> hour <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.hour'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> minute <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.minute'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> second <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.second'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> inputTime <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">'2021-9-20 20:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//最终时间</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setInterval</span><span class="token punctuation">(</span>countDown<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> nowTime <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回的是当前时间总的毫秒数</span>            <span class="token keyword">var</span> times <span class="token operator">=</span> <span class="token punctuation">(</span>inputTime <span class="token operator">-</span> nowTime<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">;</span> <span class="token comment">// times是剩余时间总的秒数 </span>            <span class="token keyword">var</span> h <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>times <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">%</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//时</span>            h <span class="token operator">=</span> h <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">'0'</span> <span class="token operator">+</span> h <span class="token operator">:</span> h<span class="token punctuation">;</span>            hour<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> h<span class="token punctuation">;</span> <span class="token comment">// 把剩余的小时给 小时黑色盒子</span>            <span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>times <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">%</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 分</span>            m <span class="token operator">=</span> m <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">'0'</span> <span class="token operator">+</span> m <span class="token operator">:</span> m<span class="token punctuation">;</span>            minute<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> m<span class="token punctuation">;</span>            <span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>times <span class="token operator">%</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 当前的秒</span>            s <span class="token operator">=</span> s <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">'0'</span> <span class="token operator">+</span> s <span class="token operator">:</span> s<span class="token punctuation">;</span>            second<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> s<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>发送短信—setInterval()</p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/bomtext03.png" alt="bomtext03.png"></p>  <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 按钮点击之后，会禁用 disabled 为true </span><span class="token comment">// 同时按钮里面的内容会变化， 注意 button 里面的内容通过 innerHTML修改</span><span class="token comment">// 里面秒数是有变化的，因此需要用到定时器</span><span class="token comment">// 定义一个变量，在定时器里面，不断递减</span><span class="token comment">// 如果变量为0 说明到了时间，我们需要停止定时器，并且复原按钮初始状态</span>        <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> time <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 定义剩下的秒数</span>        btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            btn<span class="token punctuation">.</span>disabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">// 清除定时器和复原按钮</span>                    <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>                    btn<span class="token punctuation">.</span>disabled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    btn<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'发送'</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    btn<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'还剩下'</span> <span class="token operator">+</span> time <span class="token operator">+</span> <span class="token string">'秒'</span><span class="token punctuation">;</span>                    time<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>电子时钟—setInterval()</p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/bomtext04.png" alt="bomtext04.png"></p></li><li><p>5秒钟之后自动跳转页面—setInterval()</p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/bomtext05.png" alt="bomtext05.png"></p>  <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// console.log(location.href);</span>            location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">'http://www.itcast.cn'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>timer <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">'http://www.itcast.cn'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                div<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'您将在'</span> <span class="token operator">+</span> timer <span class="token operator">+</span> <span class="token string">'秒钟之后跳转到首页'</span><span class="token punctuation">;</span>                timer<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>获取 URL 参数数据—location 对象</p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/bomtext06.png" alt="bomtext06.png"></p>  <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>search<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ?uname=andy</span>        <span class="token comment">// 1.先去掉？  substr('起始的位置'，截取几个字符); 切片</span>        <span class="token keyword">var</span> params <span class="token operator">=</span> location<span class="token punctuation">.</span>search<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// uname=andy</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 2. 利用=把字符串分割为数组 split('=');</span>        <span class="token keyword">var</span> arr <span class="token operator">=</span> params<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["uname", "ANDY"]</span>        <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 3.把数据写入div中</span>        div<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'欢迎您'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="JS执行机制"><a href="#JS执行机制" class="headerlink" title="JS执行机制"></a><strong>JS执行机制</strong></h2><h3 id="同步和异步的概念："><a href="#同步和异步的概念：" class="headerlink" title="同步和异步的概念："></a>同步和异步的概念：</h3><ul><li><p>同步</p><p>  前一个任务结束后再执行后一个任务，程序的执行顺序与任务的排列顺序是一致的、同步的。比如做饭的同步做法：我们要烧水煮饭，等水开了（10分钟之后），再去切菜，炒菜。</p></li><li><p>异步</p><p>  你在做一件事情时，因为这件事情会花费很长时间，在做这件事的同时，你还可以去处理其他事情。比如做饭的异步做法，我们在烧水的同时，利用这10分钟，去切菜，炒菜。</p></li></ul><p>他们的本质区别： 这条流水线上各个流程的执行顺序不同</p><p><img src="https://www.ipicbed.com/images/2021/12/27/bom2.png" alt="bom2.png"></p><p><img src="https://www.ipicbed.com/images/2021/12/27/bom3.png" alt="bom3.png"></p><p><img src="https://www.ipicbed.com/images/2021/12/27/bom4.png" alt="bom4.png"></p><h2 id="location-对象"><a href="#location-对象" class="headerlink" title="location 对象"></a><strong>location 对象</strong></h2><p>概念：</p><p>window 对象给我们提供了一个 location 属性用于获取或设置窗体的 URL，并且可以用于解析 URL 。 因为这个属性返回的是一个对象，所以我们将这个属性也称为 location 对象。</p><ul><li><p><strong>URL</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/bom5.png" alt="bom5.png"></p></li><li><p><strong>location 对象的属性</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/bom6.png" alt="bom6.png"></p></li><li><p><strong>location 对象的方法</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/bom7.png" alt="bom7.png"></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;BOM特性&quot;&gt;&lt;a href=&quot;#BOM特性&quot; class=&quot;headerlink&quot; title=&quot;BOM特性&quot;&gt;&lt;/a&gt;&lt;strong&gt;BOM特性&lt;/strong&gt;&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;浏览器对象模型

把「浏览器」当做一个「对象」来看待

BOM 的</summary>
      
    
    
    
    <category term="笔记" scheme="https://zfengchen.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="技术" scheme="https://zfengchen.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="前端" scheme="https://zfengchen.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Javascript" scheme="https://zfengchen.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>服务端渲染和客户端渲染</title>
    <link href="https://zfengchen.github.io/posts/7.html"/>
    <id>https://zfengchen.github.io/posts/7.html</id>
    <published>2021-12-27T02:57:51.000Z</published>
    <updated>2021-12-27T14:32:43.220Z</updated>
    
    <content type="html"><![CDATA[<h2 id="客户端渲染（Ajax）"><a href="#客户端渲染（Ajax）" class="headerlink" title="客户端渲染（Ajax）"></a>客户端渲染（Ajax）</h2><p>页面的局部刷新</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a><strong>优点</strong></h3><ol><li>可以向用户快速展示页面的内容，增加用户体验</li><li>给别人爬虫爬取相应的内容增加一定的困难</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a><strong>缺点</strong></h3><ol><li>可能需要向服务器请求多次数据</li><li>不利于SEO 搜索引擎优化，即百度、搜狗等搜索引擎搜索不到客户端渲染的数据</li></ol><h2 id="服务端渲染（NodeJs）"><a href="#服务端渲染（NodeJs）" class="headerlink" title="服务端渲染（NodeJs）"></a>服务端渲染（NodeJs）</h2><p>整个页面的刷新</p><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a><strong>优点</strong></h3><ol><li>可以向用户快速展示页面的内容，增加用户体验</li><li>给别人爬虫爬取相应的内容增加一定的困难</li></ol><h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a><strong>缺点</strong></h3><ol><li>可能需要向服务器请求多次数据</li><li>不利于SEO 搜索引擎优化，即百度、搜狗等搜索引擎搜索不到客户端渲染的数据</li></ol><h2 id="区分客户端渲染和服务端渲染"><a href="#区分客户端渲染和服务端渲染" class="headerlink" title="区分客户端渲染和服务端渲染"></a>区分客户端渲染和服务端渲染</h2><ul><li>网页源代码中没有动态数据的，是客户端渲染；（例子：京东的商品评论，局部刷新）</li><li>网页源代码中有数据的，是服务端渲染；（例子：京东商品分类，网址发生改变）</li></ul><p>参考知乎文章：<a href="https://zhuanlan.zhihu.com/p/171579801">客户端渲染和服务器渲染的区别</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;客户端渲染（Ajax）&quot;&gt;&lt;a href=&quot;#客户端渲染（Ajax）&quot; class=&quot;headerlink&quot; title=&quot;客户端渲染（Ajax）&quot;&gt;&lt;/a&gt;客户端渲染（Ajax）&lt;/h2&gt;&lt;p&gt;页面的局部刷新&lt;/p&gt;
&lt;h3 id=&quot;优点&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    <category term="笔记" scheme="https://zfengchen.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="技术" scheme="https://zfengchen.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="前端" scheme="https://zfengchen.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>NodeJs</title>
    <link href="https://zfengchen.github.io/posts/6.html"/>
    <id>https://zfengchen.github.io/posts/6.html</id>
    <published>2021-12-27T02:43:53.000Z</published>
    <updated>2021-12-27T14:32:58.008Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于nodejs"><a href="#关于nodejs" class="headerlink" title="关于nodejs"></a>关于nodejs</h1><p><a href="https://www.runoob.com/nodejs/nodejs-tutorial.html">Node.js 教程</a></p><ul><li><p>如果你是一个前端程序员，你不懂得像PHP、Python或Ruby等动态编程语言，然后你想创建自己的服务，那么Node.js是一个非常好的选择。</p></li><li><p>Node.js 是运行在服务端的 JavaScript，如果你熟悉Javascript，那么你将会很容易的学会Node.js。</p></li><li><p>当然，如果你是后端程序员，想部署一些高性能的服务，那么学习Node.js也是一个非常好的选择。</p></li></ul><h1 id="Node介绍"><a href="#Node介绍" class="headerlink" title="Node介绍"></a>Node介绍</h1><h2 id="为什么要学习Node-js"><a href="#为什么要学习Node-js" class="headerlink" title="为什么要学习Node.js"></a>为什么要学习Node.js</h2><ul><li>企业需求<ul><li>具有服务端开发经验更改</li><li>front-end</li><li>back-end</li><li>全栈开发工程师</li><li>基本的网站开发能力<ul><li>服务端</li><li>前端</li><li>运维部署</li></ul></li><li>多人社区</li></ul></li></ul><h2 id="Node-js是什么"><a href="#Node-js是什么" class="headerlink" title="Node.js是什么"></a>Node.js是什么</h2><ul><li>Node.js是JavaScript 运行时</li><li>通俗易懂的讲，Node.js是JavaScript的运行平台</li><li>Node.js既不是语言，也不是框架，它是一个平台</li><li>浏览器中的JavaScript<ul><li>EcmaScript<ul><li>基本语法</li><li>if</li><li>var</li><li>function</li><li>Object</li><li>Array</li></ul></li><li>Bom</li><li>Dom</li></ul></li><li>Node.js中的JavaScript<ul><li>没有Bom，Dom</li><li>EcmaScript</li><li>在Node中这个JavaScript执行环境为JavaScript提供了一些服务器级别的API<ul><li>例如文件的读写</li><li>网络服务的构建</li><li>网络通信</li><li>http服务器</li></ul></li></ul></li><li>构建与Chrome的V8引擎之上<ul><li>代码只是具有特定格式的字符串</li><li>引擎可以认识它，帮你解析和执行</li><li>Google Chrome的V8引擎是目前公认的解析执行JavaScript代码最快的</li><li>Node.js的作者把Google Chrome中的V8引擎移植出来，开发了一个独立的JavaScript运行时环境</li></ul></li><li>Node.js uses an envent-driven,non-blocking I/O mode that makes it lightweight and efficent.<ul><li>envent-driven 事件驱动</li><li>non-blocking I/O mode 非阻塞I/O模型（异步）</li><li>ightweight and efficent. 轻量和高效</li></ul></li><li>Node.js package ecosystem,npm,is the larget scosystem of open sourcr libraries in the world<ul><li>npm 是世界上最大的开源生态系统</li><li>绝大多数JavaScript相关的包都存放在npm上，这样做的目的是为了让开发人员更方便的去下载使用</li><li>npm install jquery</li></ul></li></ul><h2 id="Node能做什么"><a href="#Node能做什么" class="headerlink" title="Node能做什么"></a>Node能做什么</h2><ul><li>web服务器后台</li><li>命令行工具<ul><li>npm(node)</li><li>git(c语言)</li><li>hexo（node）</li><li>…</li></ul></li><li>对于前端工程师来讲，接触最多的是它的命令行工具<ul><li>自己写的很少，主要是用别人第三方的</li><li>webpack</li><li>gulp</li><li>npm</li></ul></li></ul><p>参考：<a href="https://substantial-jumpsuit-8b1.notion.site/nodeJS-e4c603453af6472f90a6b5ca126091fd">李鹏周老师的笔记</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;关于nodejs&quot;&gt;&lt;a href=&quot;#关于nodejs&quot; class=&quot;headerlink&quot; title=&quot;关于nodejs&quot;&gt;&lt;/a&gt;关于nodejs&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.runoob.com/nodejs/nodejs-</summary>
      
    
    
    
    <category term="笔记" scheme="https://zfengchen.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="技术" scheme="https://zfengchen.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="前端" scheme="https://zfengchen.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="nodejs" scheme="https://zfengchen.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>解决art-Template前后端语法冲突问题</title>
    <link href="https://zfengchen.github.io/posts/5.html"/>
    <id>https://zfengchen.github.io/posts/5.html</id>
    <published>2021-12-25T07:21:50.000Z</published>
    <updated>2021-12-25T08:00:29.275Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言：art-template-是一个简约、超快的模板引擎。"><a href="#前言：art-template-是一个简约、超快的模板引擎。" class="headerlink" title="前言：art-template 是一个简约、超快的模板引擎。"></a>前言：art-template 是一个简约、超快的模板引擎。</h3><p>它采用作用域预声明的技术来优化模板渲染速度，从而获得接近 JavaScript 极限的运行性能，并且同时支持 NodeJS 和浏览器。</p><p><a href="http://aui.github.io/art-template/zh-cn/index.html">art-Template官网文档</a></p><h3 id="模板语法："><a href="#模板语法：" class="headerlink" title="模板语法："></a>模板语法：</h3><p><img src="https://www.ipicbed.com/images/2021/12/25/05-img-01.png" alt="05-img-01.png"></p><h3 id="问题：ajax请求后获取到后台传来的数据，在使用模板引擎渲染到页面上。但是渲染出来的是空白数据，没有报错，起初以为是template-web-js的引入有问题。"><a href="#问题：ajax请求后获取到后台传来的数据，在使用模板引擎渲染到页面上。但是渲染出来的是空白数据，没有报错，起初以为是template-web-js的引入有问题。" class="headerlink" title="问题：ajax请求后获取到后台传来的数据，在使用模板引擎渲染到页面上。但是渲染出来的是空白数据，没有报错，起初以为是template-web.js的引入有问题。"></a>问题：ajax请求后获取到后台传来的数据，在使用模板引擎渲染到页面上。但是渲染出来的是空白数据，没有报错，起初以为是template-web.js的引入有问题。</h3><p><font color="chocolate">⚠️ 在 art-template 的使用中，它存在前后端冲突的问题，所以它只会接受服务端传过来的数据</font></p><h2 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h2><ol><li><p>找到项目中 node_module 下的 art-template 中的 lib /compile 下的 default.js 文件<br>目录结构如图所示</p><p> <img src="https://img-blog.csdnimg.cn/20200605075510975.png#pic_center"></p></li><li><p>其中，将 rules: [navtiveRule, artRule] 中的 navtiveRule 删除</p><p> <img src="https://img-blog.csdnimg.cn/20200605075612846.png#pic_center"></p></li><li><p>之后服务端只能解析 被 <strong><em>{ { } }</em></strong> 包起来的内容，而浏览器端只能使用 <strong><em>&lt;%= %&gt;</em></strong> 语法进行编译</p></li></ol><h2 id="详见大佬解释"><a href="#详见大佬解释" class="headerlink" title="详见大佬解释"></a>详见大佬解释</h2><p><a href="https://blog.csdn.net/u013263917/article/details/78450780?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-1.highlightwordscore&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-1.highlightwordscore">nodejs中art-template模板语法冲突解决方案_坤小的专栏-CSDN博客</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言：art-template-是一个简约、超快的模板引擎。&quot;&gt;&lt;a href=&quot;#前言：art-template-是一个简约、超快的模板引擎。&quot; class=&quot;headerlink&quot; title=&quot;前言：art-template 是一个简约、超快的模板引擎。&quot;&gt;</summary>
      
    
    
    
    <category term="学习" scheme="https://zfengchen.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="技术" scheme="https://zfengchen.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="前端" scheme="https://zfengchen.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="artTemplate" scheme="https://zfengchen.github.io/tags/artTemplate/"/>
    
  </entry>
  
  <entry>
    <title>使用vscode将项目发布到github上</title>
    <link href="https://zfengchen.github.io/posts/4.html"/>
    <id>https://zfengchen.github.io/posts/4.html</id>
    <published>2021-12-25T06:55:28.000Z</published>
    <updated>2021-12-25T07:55:15.409Z</updated>
    
    <content type="html"><![CDATA[<h2 id="先初始化存储库"><a href="#先初始化存储库" class="headerlink" title="先初始化存储库"></a>先初始化存储库</h2><p><img src="https://www.ipicbed.com/images/2021/12/25/04-img-01.png" alt="04-img-01.png"></p><h2 id="提交更改"><a href="#提交更改" class="headerlink" title="提交更改"></a>提交更改</h2><p>会显示要username和email</p><p>控制台输入</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config user.name <span class="token string">'github的用户名'</span><span class="token function">git</span> config user.email <span class="token string">'github的邮箱'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="在github上创建新的库"><a href="#在github上创建新的库" class="headerlink" title="在github上创建新的库"></a>在github上创建新的库</h2><h2 id="点击左上角的三个点，推送"><a href="#点击左上角的三个点，推送" class="headerlink" title="点击左上角的三个点，推送"></a>点击左上角的三个点，推送</h2><p><img src="https://www.ipicbed.com/images/2021/12/25/04-img-02.png" alt="04-img-02.png"></p><h2 id="选择新创建的库"><a href="#选择新创建的库" class="headerlink" title="选择新创建的库"></a>选择新创建的库</h2><p><img src="https://www.ipicbed.com/images/2021/12/25/04-img-03.png" alt="04-img-03.png"></p><p>中途可能会网路不稳定，多试几次</p><p>成功后点击以下按钮，也要多试几次</p><p><img src="https://www.ipicbed.com/images/2021/12/25/04-img-04.png" alt="04-img-04.png"></p><p>然后就成功。</p><hr><h2 id="旧项目添加新分支推送"><a href="#旧项目添加新分支推送" class="headerlink" title="旧项目添加新分支推送"></a>旧项目添加新分支推送</h2><h3 id="把项目克隆到本地，把新的文件覆盖旧的文件，然后创建新的分支，再提交。"><a href="#把项目克隆到本地，把新的文件覆盖旧的文件，然后创建新的分支，再提交。" class="headerlink" title="把项目克隆到本地，把新的文件覆盖旧的文件，然后创建新的分支，再提交。"></a>把项目克隆到本地，把新的文件覆盖旧的文件，然后创建新的分支，再提交。</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;先初始化存储库&quot;&gt;&lt;a href=&quot;#先初始化存储库&quot; class=&quot;headerlink&quot; title=&quot;先初始化存储库&quot;&gt;&lt;/a&gt;先初始化存储库&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://www.ipicbed.com/images/2021/12/2</summary>
      
    
    
    
    <category term="学习" scheme="https://zfengchen.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="技术" scheme="https://zfengchen.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="前端" scheme="https://zfengchen.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="github" scheme="https://zfengchen.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>关于个人图床问题</title>
    <link href="https://zfengchen.github.io/posts/2.html"/>
    <id>https://zfengchen.github.io/posts/2.html</id>
    <published>2021-12-23T01:50:23.000Z</published>
    <updated>2021-12-25T06:57:11.025Z</updated>
    
    <content type="html"><![CDATA[<p>在网上看到的搭建图床的教程或者使用免费的图床网站。</p><h2 id="免费的图床网站"><a href="#免费的图床网站" class="headerlink" title="免费的图床网站"></a>免费的图床网站</h2><ul><li><p>免费的图床网站主要有<a href="https://www.qiniu.com/">七牛云</a>、<a href="https://imgchr.com/">路过图床</a>、<a href="https://www.superbed.cn/">聚合图床</a>、<a href="https://imgur.loukky.com/home/multiple">公益图床</a>等。</p><blockquote><h3 id="路过图床"><a href="#路过图床" class="headerlink" title="路过图床"></a><a href="https://imgchr.com/">路过图床</a></h3><ul><li>路过图床注意有一些注意事项，如果出现违规的图片就会封IP，不给上传新的图片。<h3 id="公益图床"><a href="#公益图床" class="headerlink" title="公益图床"></a><a href="https://imgur.loukky.com/home/multiple">公益图床</a></h3></li><li>公益图床因为没有用户系统，所以不能管理已上传的图片，也就是说每次上传完之后都要备份好上传后的域名，十分麻烦。</li></ul></blockquote></li></ul><h2 id="自己搭建图床"><a href="#自己搭建图床" class="headerlink" title="自己搭建图床"></a>自己搭建图床</h2><ul><li>一般使用github或者gitee来搭建<blockquote><h3 id="使用github搭建"><a href="#使用github搭建" class="headerlink" title="使用github搭建"></a>使用github搭建</h3><ul><li>搭建前需要准备一个github账号，下载一个PicGo的软件。</li><li>PpicGo设置如下<img src="https://imgs.loukky.com/imgs/2021/12/c314041f773dfda0.png"><blockquote><ol><li><strong>仓库名</strong>是github新建的一个仓库，具体操作自行百度</li><li><strong>分支名</strong>是仓库的分支<img src="https://imgs.loukky.com/imgs/2021/12/192c1bb2b95faf35.png"></li><li><strong>Token</strong>是密钥，这个也自行百度</li><li><strong>指定存储路径</strong>是仓库里的文件夹路径，不设置的话默认放在仓库的根目录下，如需设置，格式为**<em>xxx/**</em>（例如：img/）。</li><li><strong>自定义域名</strong>是设置图片上传成功后，能直接访问的域名。格式一般为：**<em><a href="https://xxx.com/">https://xxx.com/</a>**</em></li></ol></blockquote></li></ul></blockquote></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在网上看到的搭建图床的教程或者使用免费的图床网站。&lt;/p&gt;
&lt;h2 id=&quot;免费的图床网站&quot;&gt;&lt;a href=&quot;#免费的图床网站&quot; class=&quot;headerlink&quot; title=&quot;免费的图床网站&quot;&gt;&lt;/a&gt;免费的图床网站&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;免费的图床网站主</summary>
      
    
    
    
    <category term="学习" scheme="https://zfengchen.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="技术" scheme="https://zfengchen.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>capstone实作</title>
    <link href="https://zfengchen.github.io/posts/3.html"/>
    <id>https://zfengchen.github.io/posts/3.html</id>
    <published>2021-12-22T05:28:53.000Z</published>
    <updated>2021-12-27T14:38:17.321Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基于nodejs的响应式校园订餐系统"><a href="#基于nodejs的响应式校园订餐系统" class="headerlink" title="基于nodejs的响应式校园订餐系统"></a>基于nodejs的响应式校园订餐系统</h2><h2 id="项目需求：校园点餐系统"><a href="#项目需求：校园点餐系统" class="headerlink" title="项目需求：校园点餐系统"></a>项目需求：校园点餐系统</h2><ol><li>项目运行展示首页，自动查询目前未使用的餐桌</li><li>首页需求</li></ol><ul><li> 可根据餐桌名称和餐桌的使用状态查找餐桌</li><li> 点击餐桌名称，进入菜单页面占位——加入商品到购物车——下单</li></ul><ol start="3"><li>菜单页功能</li></ol><ul><li> 占位——改变餐桌状态为正在使用，记录开始使用的时间</li><li> 取消占位——改变餐桌状态为未使用</li><li> 购物车——加入商品到购物车，购物车商品数量修改及删除</li><li> 下单——删除当前餐桌中购物车中商品，保存订单信息到数据库</li><li> 付款——下单后可取消订单或付款，同时餐桌的状态改为未使用</li></ul><ol start="4"><li>登录和注册   filter / cookies</li></ol><ul><li> 登录拦截器——要求3内的功能都需登录才可操作                </li><li> 记住密码 cookie。</li><li> 注册： 帐号 姓名 密码 地址 手机</li><li> 登录： 帐号 密码 </li></ul><h2 id="github地址"><a href="#github地址" class="headerlink" title="github地址"></a>github地址</h2><p><a href="https://github.com/zfengChen/OrderSystem.git">https://github.com/zfengChen/OrderSystem.git</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;基于nodejs的响应式校园订餐系统&quot;&gt;&lt;a href=&quot;#基于nodejs的响应式校园订餐系统&quot; class=&quot;headerlink&quot; title=&quot;基于nodejs的响应式校园订餐系统&quot;&gt;&lt;/a&gt;基于nodejs的响应式校园订餐系统&lt;/h2&gt;&lt;h2 id=&quot;项</summary>
      
    
    
    
    <category term="学习" scheme="https://zfengchen.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="项目" scheme="https://zfengchen.github.io/categories/%E5%AD%A6%E4%B9%A0/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="技术" scheme="https://zfengchen.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="前端" scheme="https://zfengchen.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="nodejs" scheme="https://zfengchen.github.io/tags/nodejs/"/>
    
    <category term="mongodb" scheme="https://zfengchen.github.io/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>第一篇博文</title>
    <link href="https://zfengchen.github.io/posts/1.html"/>
    <id>https://zfengchen.github.io/posts/1.html</id>
    <published>2021-12-22T05:13:52.000Z</published>
    <updated>2021-12-25T06:57:26.266Z</updated>
    
    <content type="html"><![CDATA[<p>我欲乘风归去，又恐琼楼玉宇，高处不胜寒。</p><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><p>使用hexo搭配nodejs搭建一个个人博客，主题使用的是Butterfly，经过某位大佬改装。</p><h2 id="博客的挂载"><a href="#博客的挂载" class="headerlink" title="博客的挂载"></a>博客的挂载</h2><p>个人博客挂载在github上</p><h2 id="文章语法"><a href="#文章语法" class="headerlink" title="文章语法"></a>文章语法</h2><p>使用Markdown语法</p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p><img src="https://cdn.jsdelivr.net/gh/zhaoze-jpg/Xianqi@main/imgg/9.webp" alt="图片"></p><h2 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h2><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=446935665&amp;auto=0&amp;height=66"></iframe>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我欲乘风归去，又恐琼楼玉宇，高处不胜寒。&lt;/p&gt;
&lt;h2 id=&quot;技术栈&quot;&gt;&lt;a href=&quot;#技术栈&quot; class=&quot;headerlink&quot; title=&quot;技术栈&quot;&gt;&lt;/a&gt;技术栈&lt;/h2&gt;&lt;p&gt;使用hexo搭配nodejs搭建一个个人博客，主题使用的是Butterfly</summary>
      
    
    
    
    <category term="生活" scheme="https://zfengchen.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="想法" scheme="https://zfengchen.github.io/tags/%E6%83%B3%E6%B3%95/"/>
    
  </entry>
  
</feed>
