<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>面试高频题-css水平居中</title>
      <link href="/posts/35.html"/>
      <url>/posts/35.html</url>
      
        <content type="html"><![CDATA[<h3 id="传统网页布局的三种定位方式："><a href="#传统网页布局的三种定位方式：" class="headerlink" title="传统网页布局的三种定位方式："></a><strong>传统网页布局的三种定位方式：</strong></h3><ul><li>普通流</li><li>浮动</li><li>定位</li></ul><h3 id="普通流（inline）行内元素-居中"><a href="#普通流（inline）行内元素-居中" class="headerlink" title="普通流（inline）行内元素 居中"></a><strong>普通流（inline）行内元素 居中</strong></h3><p>普通流里常用 text-align：center 居中显示元素。注意：这种情况下，块级元素可以实现居中。但是行内元素不行。</p><p><strong>解决方法：</strong></p><p>行内元素通过给父级元素添加  text-align：center 使行内元素居中显示。</p><p><strong>这是直接给行内元素添加  text-align：center 的情况：</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"><span class="token selector">*</span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">p</span><span class="token punctuation">{</span><span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">h1</span><span class="token punctuation">{</span><span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">span</span><span class="token punctuation">{</span><span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>this is p tag<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>this is h1 tag<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>this is span tag<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>这是给行内元素的父元素添加了 text-align: center</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"><span class="token selector">*</span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">p</span><span class="token punctuation">{</span><span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">h1</span><span class="token punctuation">{</span><span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">#span-fa</span><span class="token punctuation">{</span><span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>this is p tag<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>this is h1 tag<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>span-fa<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>this is span tag<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="普通流（block）块级元素-居中"><a href="#普通流（block）块级元素-居中" class="headerlink" title="普通流（block）块级元素 居中"></a><strong>普通流（block）块级元素 居中</strong></h3><p>块级元素可以设置宽高，所以我们可以调整外边距 margin 来实现元素居中显示。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"><span class="token selector">.div1</span><span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>div1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：ie5 和 ie6 不支持这种居中方法。</strong></p><p>解决方法：给 body 添加 text-align: center;  给不需要居中的元素添加text-align: left;（元素默认左对齐）</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"><span class="token selector">body</span><span class="token punctuation">{</span><span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">h1</span><span class="token punctuation">{</span><span class="token property">text-align</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.div1</span><span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>this is h1 tag<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>div1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="浮动元素-居中"><a href="#浮动元素-居中" class="headerlink" title="浮动元素 居中"></a>浮动元素 居中</h3><p>浮动元素脱离了普通文档流 margin: 0 auto; 已经失效。所以浮动元素可以通过添加相对定位再配合外边距来实现元素居中显示。具体操作如下：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"><span class="token selector">.div2</span><span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span><span class="token property">margin-left</span><span class="token punctuation">:</span> -100px<span class="token punctuation">;</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>div2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：该方法需要元素有一定的宽度，以及知道该元素的宽度。</p><p><strong>可以使用css3优化该方法：（使用transform来移动x轴的位置）</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"><span class="token selector">.div2</span><span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>-50%<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>div2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：这个经过css3优化的方法，需要考虑兼容性的问题</p><h3 id="绝对定位-居中"><a href="#绝对定位-居中" class="headerlink" title="绝对定位 居中"></a>绝对定位 居中</h3><p><strong>方法一：</strong></p><p>如果是一个行内元素，设置了绝对定位，那么这个行内元素就可以设置宽度和高度。所以我们可以使用普通流块级元素居中的方法： margin： 0 auto；</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"><span class="token selector">body</span><span class="token punctuation">{</span><span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.span2</span><span class="token punctuation">{</span><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span><span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>span2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>1111111<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>方法二：</strong></p><p>已知元素的宽度和高度，可以通过设置 <strong>左边偏移 left:50%**； 配合设置 **左外边距 margin-left</strong> 为宽度的一半，注意该数值必须为负数。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"><span class="token selector">body</span><span class="token punctuation">{</span><span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.span2</span><span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span> 120px<span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span><span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span><span class="token property">margin-left</span><span class="token punctuation">:</span> -60px<span class="token punctuation">;</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>span3<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>222<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>方法三：</strong></p><p>通过css3来优化方法二，使用 transform 属性。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"><span class="token selector">body</span><span class="token punctuation">{</span><span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.span2</span><span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span> 120px<span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span><span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>-50%<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>span3<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>222<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：css3的方法，需要考虑兼容性的问题</p><p>总结：以上是最基础的居中方法，还有其他的居中方法，比如添加父元素等。</p>]]></content>
      
      
      <categories>
          
          <category> 面试高频题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 面试 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试高频题-css让超宽文本替换为省略号</title>
      <link href="/posts/34.html"/>
      <url>/posts/34.html</url>
      
        <content type="html"><![CDATA[<h3 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h3><p>盒子设置了宽高，但是文本内容过长，文字会超出盒子显示。</p><h3 id="目的："><a href="#目的：" class="headerlink" title="目的："></a>目的：</h3><p>让超出盒子部分的文字用省略号代替。</p><h3 id="单行文本显示省略号"><a href="#单行文本显示省略号" class="headerlink" title="单行文本显示省略号"></a><strong>单行文本显示省略号</strong></h3><p>用到的三个属性分别是：overflow、text-overflow和white-space</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"><span class="token selector">.div1</span><span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span>6.25rem<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> #ff007f<span class="token punctuation">;</span><span class="token comment">/* 隐藏超出范围的部分 */</span><span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token comment">/* 文本溢出部分省略 */</span><span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span><span class="token comment">/* 所有文字在一行显示，不换行 */</span><span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>div1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>老师老师！！！最近面试我遇到多行的，虽然我搞懂了，但老师能不能搞一期 爱你爱你=替换省略号好像浏览器兼容性不太好是的，因此有些公司会直接输入.....老师老师！！！最近面试我遇到多行的，虽然我搞懂了，但老师能不能搞一期 爱你爱你<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果图：</p><p><img src="https://www.ipicbed.com/images/2022/02/04/9ee0000da4a8ffcfacdaaa19a66e465f.png" alt="https://www.ipicbed.com/images/2022/02/04/9ee0000da4a8ffcfacdaaa19a66e465f.png"></p><h3 id="多行文本显示省略号"><a href="#多行文本显示省略号" class="headerlink" title="多行文本显示省略号"></a>多<strong>行文本显示省略号</strong></h3><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><p>使用私有属性 <strong>-webkit-box</strong></p><p>优点：简洁明了</p><p>缺点：私有属性（较大的局限性）</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"><span class="token selector">.div2</span> <span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span> 12.5rem<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 6.8rem<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> #55ff7f<span class="token punctuation">;</span><span class="token comment">/* 隐藏超出范围的部分 */</span><span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token property">display</span><span class="token punctuation">:</span> -webkit-box<span class="token punctuation">;</span><span class="token comment">/* 设置盒子内的子元素排列方向 */</span><span class="token property">-webkit-box-orient</span><span class="token punctuation">:</span> vertical<span class="token punctuation">;</span><span class="token comment">/* 设置从第几行开始省略 */</span><span class="token property">-webkit-line-clamp</span><span class="token punctuation">:</span> 5<span class="token punctuation">;</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>div2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>老师老师！！！最近面试我遇到多行的，虽然我搞懂了，但老师能不能搞一期 爱你爱你替换省略号好像浏览器兼容性不太好是的，因此有些公司会直接输入老师老师！！！最近面试我遇到多行的，虽然我搞懂了，但老师能不能搞一期 爱你爱你<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><p><strong>双重伪元素</strong></p><p>优点：符合css规范</p><p>缺点：背景如果是图片就没办法使用</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"><span class="token selector">.p3</span> <span class="token punctuation">{</span><span class="token property">height</span><span class="token punctuation">:</span> 210px<span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span> 31px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> #55ff7f<span class="token punctuation">;</span><span class="token comment">/* 隐藏超出范围的部分 */</span><span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token comment">/* 文本对齐方式 */</span><span class="token property">text-align</span><span class="token punctuation">:</span> justify<span class="token punctuation">;</span><span class="token property">padding-right</span><span class="token punctuation">:</span> 1em<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.p3::before</span><span class="token punctuation">{</span><span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">'...'</span><span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span><span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.p3::after</span><span class="token punctuation">{</span><span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token property">display</span><span class="token punctuation">:</span> inline<span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span><span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> 1em<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 1em<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token property">margin-top</span><span class="token punctuation">:</span> 0.5em<span class="token punctuation">;</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>p3<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>老师老师！！！最近面试我遇到多行的，虽然我搞懂了，但老师能不能搞一期 爱你爱你替换省略号好像浏览器兼容性不太好是的，因此有些公司会直接输入老师老师！！！最近面试我遇到多行的，虽然我搞懂了，但老师能不能搞一期 爱你爱你老师老师！！！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://www.ipicbed.com/images/2022/02/04/css.png" alt="https://www.ipicbed.com/images/2022/02/04/css.png"></p><p>当盒子宽度够宽，能显示全部文字时，不需要省略号了，和背景色一样颜色的正方形小方块就会遮住省略号。</p><h3 id="方法三：（一般面试不问）"><a href="#方法三：（一般面试不问）" class="headerlink" title="方法三：（一般面试不问）"></a>方法三：（一般面试不问）</h3><p><strong>linear-gradient，不使用省略号</strong></p><p>优点：符合css规范</p><p>缺点：还是背景问题</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"><span class="token selector">.p4</span> <span class="token punctuation">{</span><span class="token property">height</span><span class="token punctuation">:</span> 210px<span class="token punctuation">;</span><span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token property">text-align</span><span class="token punctuation">:</span> justify<span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> #55ff7f<span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span> 31px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.p4::after</span><span class="token punctuation">{</span><span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span><span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 1.2em<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> 20%<span class="token punctuation">;</span><span class="token comment">/* 使用渐变背景色来代替省略号，体现美观 */</span><span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right<span class="token punctuation">,</span><span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span>255<span class="token punctuation">,</span>255<span class="token punctuation">,</span>0<span class="token punctuation">)</span><span class="token punctuation">,</span>#ff55ff 80%<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">margin-bottom</span><span class="token punctuation">:</span> 0.2em<span class="token punctuation">;</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>p4<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>老师老师！！！最近面试我遇到多行的，虽然我搞懂了，但老师能不能搞一期 爱你爱你替换省略号好像浏览器兼容性不太好是的，因此有些公司会直接输入老师老师！！！最近面试我遇到多行的，虽然我搞懂了，但老师能不能搞一期 爱你爱你老师老师！！！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://www.ipicbed.com/images/2022/02/04/css02.png" alt="https://www.ipicbed.com/images/2022/02/04/css02.png"></p><p>这样一来就会体现一种朦胧美感，这渐变色要设置成和背景同色。</p>]]></content>
      
      
      <categories>
          
          <category> 面试高频题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 面试 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试高频题-css把正方形变成圆形</title>
      <link href="/posts/33.html"/>
      <url>/posts/33.html</url>
      
        <content type="html"><![CDATA[<p>使用 border-radius 使正方形变成圆形，常见的单位是 px、%、em</p><p>注：em是相对长度单位，一般用于设置字体。默认字体大小是16px，所有浏览器默认 1em=16px 。</p><p>把正方形（600px）变成圆形，只需要设置 border-radius ：</p><p>单位是 px 的时候，设置 border-radius 为正方形长度的一半 300px</p><p>单位是 % 的时候，设置 border-radius 为 50%</p><p>单位是 em 的时候，通过单位换算，1em = 16px 已知正方形长度的一半 300px，算出半径为 18.75em</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>当设置 border-radius 的时候，圆形超出正方形的时，这是不合理的，css不会作出超出范围的处理。</p>]]></content>
      
      
      <categories>
          
          <category> 面试高频题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 面试 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试高频题-css绘制三角形</title>
      <link href="/posts/32.html"/>
      <url>/posts/32.html</url>
      
        <content type="html"><![CDATA[<h3 id="css绘制三角形原理：（以正方形为例）"><a href="#css绘制三角形原理：（以正方形为例）" class="headerlink" title="css绘制三角形原理：（以正方形为例）"></a>css绘制三角形原理：（以正方形为例）</h3><p>沿着正方形对角线进行切割，形成4个三角形。</p><p>方法一：（推荐）</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"><span class="token selector">.div1</span><span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span> 6.25rem solid transparent<span class="token punctuation">;</span>  <span class="token property">border-right-color</span><span class="token punctuation">:</span> #FF0000<span class="token punctuation">;</span> <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>div1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://www.ipicbed.com/images/2022/02/04/535f41537cdaac208e42cc22f21b376a.png" alt="https://www.ipicbed.com/images/2022/02/04/535f41537cdaac208e42cc22f21b376a.png"></p><p>方法二：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"><span class="token selector">.div1</span><span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token property">border-top</span><span class="token punctuation">:</span> 6.25rem solid transparent<span class="token punctuation">;</span><span class="token property">border-bottom</span><span class="token punctuation">:</span> 0 solid transparent<span class="token punctuation">;</span><span class="token property">border-left</span><span class="token punctuation">:</span> 0 solid transparent<span class="token punctuation">;</span><span class="token property">border-right</span><span class="token punctuation">:</span> 6.25rem solid #FF0000<span class="token punctuation">;</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>div1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：这里的边框必须由 <strong>上边框/下边框</strong> 配合 <strong>左边框/右边框</strong></p><p><img src="https://www.ipicbed.com/images/2022/02/04/2.png" alt="https://www.ipicbed.com/images/2022/02/04/2.png"></p>]]></content>
      
      
      <categories>
          
          <category> 面试高频题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 面试 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试高频题-href和src的区别</title>
      <link href="/posts/31.html"/>
      <url>/posts/31.html</url>
      
        <content type="html"><![CDATA[<p>href全称是Hypertext Reference，意思是 超文本 引用/参照</p><p>src全称是Source，意思是 资源</p><p>href属性常被用于 a、link 标签</p><p>src属性常被用于 img、style、script、input和iframe 标签</p><p> 两者做一个对比</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>girl.png<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>girl.png<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>女孩<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果是：img标签显示的是一张图片，而a标签显示一个名为女孩的超链接，点击之后才能看到照片。</p><p>可以看出：</p><ul><li>分析a标签，只有点击a标签的时候会跳转到href连接的资源。href属性会搭建一个通道，这个通道连接着需要的资源。</li><li>img标签不需要被点击就会直接显示在被引用的图片在网页上面，src属性指向的资源直接成为了当前文档的一部分。<ul><li>实际上src属性在引用目标资源的时候会下载目标资源，并且会绑定到文档上。</li><li>而且浏览器在遇到src属性的时候，会暂停<strong>其他资源的下载和处理</strong>，直到src属性指向的资源下载、编译、执行完之后才会进行下一步。</li><li>这个过程类似汽车加油，油量会显示在油表上。汽车在加油的时候不能动，直到加油结束，油表显示油量。</li></ul></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="href"><a href="#href" class="headerlink" title="href"></a>href</h3><p>超链接会建立通道，是使<strong>当前元素或者文档</strong>和<strong>引用资源</strong>建立联系。需要引用资源的时候就可以通过<strong>通道</strong>进行引用了。</p><h3 id="src"><a href="#src" class="headerlink" title="src"></a>src</h3><p>src属性会把<strong>资源</strong>下载下来，替换掉<strong>当前的元素</strong>，最后嵌入到文档中。</p>]]></content>
      
      
      <categories>
          
          <category> 面试高频题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 面试 </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>发送Ajax请求的四种常用方式</title>
      <link href="/posts/30.html"/>
      <url>/posts/30.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><h2 id="Ajax简介"><a href="#Ajax简介" class="headerlink" title="Ajax简介"></a>Ajax简介</h2><ul><li><p>AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。</p></li><li><p>AJAX 不是新的编程语言，而是一种使用现有标准的新方法。</p></li><li><p>AJAX 最大的优点是在不重新加载整个页面的情况下，可以与服务器交换数据并更新部分网页内容。</p></li><li><p>AJAX 不需要任何浏览器插件，但需要用户允许JavaScript在浏览器上执行。</p></li></ul><h2 id="Ajax-应用"><a href="#Ajax-应用" class="headerlink" title="Ajax 应用"></a>Ajax 应用</h2><ul><li><p>运用 XHTML+CSS 来表达资讯;</p></li><li><p>运用 JavaScript 操作 DOM 来执行动态效果;</p></li><li><p>运用 XML 和 XSLT 操作资料;</p></li><li><p>运用 XMLHttpRequest 或新的 Fetch API 与网页服务器进行异步资料交换;</p></li></ul><h2 id="发送Ajax请求的四种常用方式"><a href="#发送Ajax请求的四种常用方式" class="headerlink" title="发送Ajax请求的四种常用方式"></a>发送Ajax请求的四种常用方式</h2><h2 id="1-原生Ajax"><a href="#1-原生Ajax" class="headerlink" title="1-原生Ajax"></a>1-原生Ajax</h2><p><strong>发送Ajax请求</strong></p><p>在需要发送请求的页面书写</p><p>注意要清楚知道想要发送请求的对象，比如：点击按钮发送Ajax请求，那么就是按钮点击事件触发的发送Ajax请求。</p><p><strong>get请求</strong></p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 1、创建对象</span>      <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 2、初始化 设置请求方法和 url</span>      xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span> <span class="token string">'http://127.0.0.1:3000/server?a=100&amp;b=200&amp;c=300'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 3、发送</span>      xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//4. 事件绑定 处理服务端返回的结果</span>      <span class="token comment">// on  when 当....时候</span>      <span class="token comment">// readystate 是 xhr 对象中的属性, 表示状态 0 1 2 3 4</span>      <span class="token comment">// change  改变</span>      xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>          <span class="token comment">//判断 (服务端返回了所有的结果)</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment">//判断响应状态码 200  404  403 401 500</span>              <span class="token comment">// 2xx 成功</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token comment">//处理结果  行 头 空行 体</span>                  <span class="token comment">//响应 </span>                  <span class="token comment">// console.log(xhr.status);//状态码</span>                  <span class="token comment">// console.log(xhr.statusText);//状态字符串</span>                  <span class="token comment">// console.log(xhr.getAllResponseHeaders());//所有响应头</span>                  <span class="token comment">// console.log(xhr.response);//响应体</span>                  <span class="token comment">//设置 result 的文本</span>                  res<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> xhr<span class="token punctuation">.</span>response<span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>post请求</strong></p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">//1. 创建对象</span>      <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//2. 初始化 设置类型与 URL</span>      xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'post'</span><span class="token punctuation">,</span> <span class="token string">'http://127.0.0.1:3000/server'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//设置请求头</span>      <span class="token comment">// Content-Type 设置请求体内容的类型</span>      <span class="token comment">// application/x-www-form-urlencoded </span>      <span class="token comment">// 设置 请求体向服务器传递参数的类型</span>      xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 自定义请求头信息 上面的是预定义的请求头</span>      xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'atguigu'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//3. 发送</span>      <span class="token comment">// xhr.send();</span>      <span class="token comment">// 设置请求体 向服务器传递参数</span>      xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'a=100&amp;b=200'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//4. 事件绑定</span>      xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>          <span class="token comment">//判断</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token comment">//处理服务端返回的结果</span>                  res<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> xhr<span class="token punctuation">.</span>response<span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>get请求和post请求区别</p><p>get请求的请求参数可以直接拼接在url地址上</p><p>post请求的请求参数是放在send（）方法里的</p><ul><li><p>post请求如果要发送自定义的请求头信息 要自己通过setRequestHeader（）方法设置</p>  <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 自定义请求头信息 上面的是预定义的请求头</span>xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'atguigu'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>post请求还要设置请求体向服务器传递参数的类型</p>  <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="2-jQuery发送Ajax请求"><a href="#2-jQuery发送Ajax请求" class="headerlink" title="2-jQuery发送Ajax请求"></a>2-jQuery发送Ajax请求</h2><p>jq发送Ajax请求有两种方法</p><h3 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a><strong>第一种</strong></h3><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 此处以get请求为例 get('请求地址'，'请求参数'，'回调函数'，'响应体的类型')</span><span class="token comment">// get请求</span>$<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'http://127.0.0.1:3000/jq'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token number">200</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">'json'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// post请求</span>$<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'http://127.0.0.1:3000/jq'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token number">200</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">'json'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意设置了响应体的类型后，后台服务器代码要设置发送json格式的字符串数据</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 后台服务器代码</span><span class="token comment">// 1、引入express</span><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 路径处理模块</span><span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//  2、创建应用对象</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 静态资源访问服务功能</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'public'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3、jq服务 http://127.0.0.1:3000/jq</span>app<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token string">'/jq'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">//设置响应头  设置允许跨域</span>    res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Origin'</span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置 自定义请求头</span>    res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Headers'</span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置返回的数据</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>        name<span class="token operator">:</span> <span class="token string">'admin'</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment">//设置响应体 返回json格式的字符串数据</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//4. 监听端口启动服务</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'running...'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a><strong>第二种</strong></h3><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 通用方式发送Ajax请求</span>$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                <span class="token comment">// url 地址</span>                url<span class="token operator">:</span> <span class="token string">'http://127.0.0.1:3000/jq'</span><span class="token punctuation">,</span>                <span class="token comment">// 发送的 参数</span>                data<span class="token operator">:</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token number">200</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token comment">// 请求类型</span>                type<span class="token operator">:</span> <span class="token string">'get'</span><span class="token punctuation">,</span><span class="token comment">// 设置发送 参数 的数据类型 默认值</span><span class="token comment">// 如发送json数据 改成 application/json </span>contentType<span class="token operator">:</span> <span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">,</span>                <span class="token comment">// 设置 响应体结果 类型</span>                dataType<span class="token operator">:</span> <span class="token string">'json'</span><span class="token punctuation">,</span>                <span class="token comment">// 成功的回调</span>                <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token comment">// 超时时间</span>                timeout<span class="token operator">:</span> <span class="token number">2000</span><span class="token punctuation">,</span>                <span class="token comment">// 失败回调</span>                <span class="token function-variable function">error</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'出错了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token comment">// 头信息</span>                headers<span class="token operator">:</span> <span class="token punctuation">{</span>                    c<span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">,</span>                    d<span class="token operator">:</span> <span class="token number">400</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-Axios发送Ajax请求"><a href="#3-Axios发送Ajax请求" class="headerlink" title="3-Axios发送Ajax请求"></a>3-Axios发送Ajax请求</h2><p><a href="http://www.axios-js.com/zh-cn/docs/">axios中文文档|axios中文网</a></p><p>Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。是一个热门的Ajax工具库。</p><h3 id="发送get、post请求（单一）"><a href="#发送get、post请求（单一）" class="headerlink" title="发送get、post请求（单一）"></a>发送get、post请求（单一）</h3><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 对url地址进行简化</span>axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>baseURL <span class="token operator">=</span> <span class="token string">'http://127.0.0.1:3000'</span><span class="token punctuation">;</span><span class="token comment">// 发送get请求</span>axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/axios'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>                <span class="token comment">// 设置url参数</span>                params<span class="token operator">:</span> <span class="token punctuation">{</span>                    id<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>                    vip<span class="token operator">:</span> <span class="token number">7</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token comment">//请求头信息</span>                headers<span class="token operator">:</span> <span class="token punctuation">{</span>                    name<span class="token operator">:</span> <span class="token string">'admin'</span><span class="token punctuation">,</span>                    age<span class="token operator">:</span> <span class="token number">20</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token comment">// 返回的结果</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 发送post请求</span>axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/axios'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>                username<span class="token operator">:</span> <span class="token string">'admin'</span><span class="token punctuation">,</span>                password<span class="token operator">:</span> <span class="token string">'123456'</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>                <span class="token comment">//url </span>                params<span class="token operator">:</span> <span class="token punctuation">{</span>                    id<span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>                    vip<span class="token operator">:</span> <span class="token number">9</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token comment">//请求头参数</span>                headers<span class="token operator">:</span> <span class="token punctuation">{</span>                    height<span class="token operator">:</span> <span class="token number">180</span><span class="token punctuation">,</span>                    weight<span class="token operator">:</span> <span class="token number">180</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="通用方法（这样子不同请求可以不用分开写）"><a href="#通用方法（这样子不同请求可以不用分开写）" class="headerlink" title="通用方法（这样子不同请求可以不用分开写）"></a>通用方法（这样子不同请求可以不用分开写）</h3><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                <span class="token comment">//请求方法</span>                method<span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>                <span class="token comment">//url</span>                url<span class="token operator">:</span> <span class="token string">'/axios'</span><span class="token punctuation">,</span>                <span class="token comment">//url参数</span>                params<span class="token operator">:</span> <span class="token punctuation">{</span>                    vip<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>                    level<span class="token operator">:</span> <span class="token number">30</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token comment">//头信息</span>                headers<span class="token operator">:</span> <span class="token punctuation">{</span>                    a<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>                    b<span class="token operator">:</span> <span class="token number">200</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token comment">//请求体参数</span>                data<span class="token operator">:</span> <span class="token punctuation">{</span>                    username<span class="token operator">:</span> <span class="token string">'admin'</span><span class="token punctuation">,</span>                    password<span class="token operator">:</span> <span class="token string">'admin'</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                <span class="token comment">//响应状态码</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//响应状态字符串</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>statusText<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//响应头信息</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//响应体</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-fetch函数发送Ajax请求"><a href="#4-fetch函数发送Ajax请求" class="headerlink" title="4-fetch函数发送Ajax请求"></a>4-fetch函数发送Ajax请求</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API">Fetch API - Web API 接口参考 | MDN</a></p><h3 id="fetch简介"><a href="#fetch简介" class="headerlink" title="fetch简介"></a>fetch简介</h3><ul><li>fetch是web提供的一个可以获取异步资源的api，目前还没有被所有浏览器支持。</li><li>fetch提供的api返回的是Promise对象，如果不知道Promise和它的用法的朋友们可以看我下一篇文章，有关Promise的相关介绍以及用法。</li></ul><h3 id="fetch的特点"><a href="#fetch的特点" class="headerlink" title="fetch的特点"></a>fetch的特点</h3><ul><li>fetch() 必须接受一个参数——资源的路径。无论请求成功与否，它都返回一个 Promise 对象，resolve 对应请求的 Response。</li><li>fetch() 是全局对象的</li><li>fetch() 不会接受跨域 cookies；你也不能使用 fetch() 建立起跨域会话，其他域的Set-Cookie头部字段将会被无视。</li><li>fetch 不会发送 cookies。除非你使用了credentials 的初始化选项。（自 2017 年 8 月 25 日以后，默认的 credentials 政策变更为 same-origin。Firefox 也在 61.0b13 版本中进行了修改）</li></ul><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 使用fetch函数发送ajax请求</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'http://127.0.0.1:3000/fetch'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token comment">//请求方法</span>    method<span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>    <span class="token comment">//请求头</span>    headers<span class="token operator">:</span> <span class="token punctuation">{</span>        name<span class="token operator">:</span> <span class="token string">'admin'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">//请求体</span>    body<span class="token operator">:</span> <span class="token string">'username=admin&amp;password=123456'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// 用 then的回调 处理回调结果</span>    <span class="token comment">// 获取 响应体 结果 用text（）方法</span>    <span class="token comment">// 若服务端返回的结果是json格式的数据 则用json（）方法</span>    <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// return response.json();</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Ajax </tag>
            
            <tag> Axios </tag>
            
            <tag> 面试 </tag>
            
            <tag> jQuery </tag>
            
            <tag> fetch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试高频题-作用域</title>
      <link href="/posts/29.html"/>
      <url>/posts/29.html</url>
      
        <content type="html"><![CDATA[<h2 id="面试高频题系列-—-作用域"><a href="#面试高频题系列-—-作用域" class="headerlink" title="面试高频题系列 — 作用域"></a>面试高频题系列 — 作用域</h2><h3 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h3><p>全局作用于指的是最外层的作用域，类似于文件里的根目录。在全局作用域内声明的变量称为全局变量</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">'aaa'</span> <span class="token comment">// 全局变量</span><span class="token keyword">function</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">'bbb'</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// 输出 aaa</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="局部作用域"><a href="#局部作用域" class="headerlink" title="局部作用域"></a>局部作用域</h3><p>局部作用域指的是在函数内部的作用域，类似于文件里的根目录下的子目录。除此之外，在全局作用域内声明的变量称为全局变量</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">'aaa'</span><span class="token keyword">function</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">'bbb'</span> <span class="token comment">// 局部变量</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// 输出 bbb</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h3><p>一般指的是if、while、for循环里面的作用域</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">'aaa'</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">'bbb'</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// 输出 bbb</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="作用域提升"><a href="#作用域提升" class="headerlink" title="作用域提升"></a>作用域提升</h3><p>var可以将变量提升</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// 输出 undefind</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">'aaa'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// 输出 aaa</span><span class="token punctuation">}</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码可以理解为在show()函数内，定义了一个变量a，但是并给a没有赋值</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> a<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// 输出 undefind</span>a <span class="token operator">=</span> <span class="token string">'aaa'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// 输出 aaa</span><span class="token punctuation">}</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>函数声明提升</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">'bbb'</span><span class="token keyword">function</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// 输出 undefind</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">'aaa'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 输出 aaa</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> a<span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码可以理解为</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">'bbb'</span><span class="token keyword">function</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> a<span class="token punctuation">}</span><span class="token keyword">var</span> aconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// 输出 undefind</span>a <span class="token operator">=</span> <span class="token string">'aaa'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 输出 aaa</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><p>作用域链指的是js规定好的变量的访问次序。就好像以下例子，在show()函数内打印的a，会先查看函数内部是否存在a，没有话就在全局寻找a</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">'aaa'</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token string">'bbb'</span><span class="token keyword">function</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">'aaa1'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// aaa1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment">// bbb</span><span class="token punctuation">}</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// aaa</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="最后推荐看一下b站蛋老师的视频讲解"><a href="#最后推荐看一下b站蛋老师的视频讲解" class="headerlink" title="最后推荐看一下b站蛋老师的视频讲解"></a>最后推荐看一下b站蛋老师的视频讲解</h3><iframe src="//player.bilibili.com/player.html?aid=68195454&amp;bvid=BV1AJ41137cW&amp;cid=118200453&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="100%" height="700"> </iframe>]]></content>
      
      
      <categories>
          
          <category> 面试高频题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 作用域 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试高频题-闭包</title>
      <link href="/posts/28.html"/>
      <url>/posts/28.html</url>
      
        <content type="html"><![CDATA[<h2 id="面试高频题系列-—-闭包"><a href="#面试高频题系列-—-闭包" class="headerlink" title="面试高频题系列 — 闭包"></a>面试高频题系列 — 闭包</h2><h3 id="什么是闭包"><a href="#什么是闭包" class="headerlink" title="什么是闭包"></a>什么是闭包</h3><p>在以下情况是访问不了函数内部的变量。总的来说，闭包就是我们把一本书放到书包里拉上拉链。这里面书包就是一个函数，书就是这个函数里的一些变量或者值。</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">books</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> book <span class="token operator">=</span> <span class="token string">'书包里的书'</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="执行上下文"><a href="#执行上下文" class="headerlink" title="执行上下文"></a>执行上下文</h3><p>执行上下文，也就是执行环境。分为三种，全局环境、函数环境、Eval环境。</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'到底了'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码可以理解成：(在这里因为js是单线程的，所以以薯片罐子为例子)</p><p>在一个薯片罐子里，先放一片名为<strong>全局执行上下文</strong>的薯片；</p><p>然后发现要执行a()，就把名为<strong>a函数的执行上下文</strong>的薯片放到罐子里；</p><p>在a函数里面发现要执行b(),就把名为<strong>b函数的执行上下文</strong>的薯片放到罐子里;</p><p>在b函数里面发现要执行c(),就把名为<strong>c函数的执行上下文</strong>的薯片放到罐子里;</p><p>在c函数内发现了要执行的代码，执行完之后，将以上薯片一片一片的拿出来。</p><p>总的来说，栈就先进后出。执行上下文栈也是这样。通常进栈为push()，出栈为pop()</p><p>执行上下文分为<strong>创建阶段</strong>和<strong>执行阶段</strong>。</p><ul><li><p>创建阶段</p><ul><li><p>作用域链</p><h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><p>  作用域链指的是js规定好的变量的访问次序。就好像以下例子，在show()函数内打印的a，会先查看函数内部是否存在a，没有话就在全局寻找a</p>  <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">'aaa'</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token string">'bbb'</span><span class="token keyword">function</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">'aaa1'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// aaa1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment">// bbb</span><span class="token punctuation">}</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// aaa</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>变量对象</p></li><li><p>this</p></li></ul></li><li><p>执行阶段</p><ul><li>变量赋值</li><li>函数应用</li></ul></li></ul><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">books</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> book <span class="token operator">=</span> <span class="token string">'这是一本书'</span><span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> bag <span class="token operator">=</span> <span class="token function">books</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">bag</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 这是一本书</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主要关注执行上下文的创建阶段里面的作用域链。执行上下文可以看成一个对象，里面主要由有2个属性，一个是作用域链，另一个是变量对象</p><p><strong>任何代码执行，都会有全局执行上下文</strong></p><p>全局执行上下文 = { 作用域链 : { 全局变量对象 } ， { 变量对象 ：books，bag } }</p><p>bag指向books，所以第二个执行上下文是books，books里面只有一个名为book的变量对象</p><p>books执行上下文 = { 作用域链 : { books变量对象 + 全局变量对象 } ， { 变量对象 ：book } }</p><p>然后返回一个匿名函数，所以创建一个匿名函数执行上下文，里面没有变量对象</p><p>匿名函数执行上下文 = { 作用域链 : { 匿名函数变量对象 + books变量对象 + 全局变量对象 } ， { 变量对象 ：} }</p><p>最后发现匿名函数要执行 console.log（book），一开始在匿名函数的变量对象里面找，没有找到，就顺着作用域链往上找，直到找到为止。</p><h3 id="经典面试题"><a href="#经典面试题" class="headerlink" title="经典面试题"></a>经典面试题</h3><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment">// 5 (过了4s以后输出) 5 6 7 8 9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这里面，setTimeout属于<strong>异步任务</strong>，会被放在<strong>任务队列</strong>里面等待，直到<strong>执行栈</strong>执行完<strong>同步任务</strong>后再执行<strong>任务队列</strong>里面的异步任务。</p><p>全局执行上下文 = { 作用域链 : { 全局变量对象 } ， { 变量对象 ：i  } }</p><p>执行完for循环后，得到 i=5 ，注意 i 是全局变量，所以第一个打印出来的 i 是 5。</p><p>然后现在任务队列里面有5个 i++，他们被放到执行栈里面去执行。</p><p>最后会输出 5 、6 、7 、8 、9 （注意是i++不是++i，一个是先输出再执行，一个是先执行后输出）</p><p>如果想然他输出 0 1 2 3 4，给setTimeout套一个立即执行函数就好了。</p><h3 id="最后推荐看一下b站蛋老师的视频讲解"><a href="#最后推荐看一下b站蛋老师的视频讲解" class="headerlink" title="最后推荐看一下b站蛋老师的视频讲解"></a>最后推荐看一下b站蛋老师的视频讲解</h3><iframe src="//player.bilibili.com/player.html?aid=74450413&amp;bvid=BV1iE411q7Qd&amp;cid=127346643&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="100%" height="700"> </iframe>]]></content>
      
      
      <categories>
          
          <category> 面试高频题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 面试 </tag>
            
            <tag> 闭包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>导航站正式启用</title>
      <link href="/posts/27.html"/>
      <url>/posts/27.html</url>
      
        <content type="html"><![CDATA[<h2 id="导航站启用，博客正在被百度收录"><a href="#导航站启用，博客正在被百度收录" class="headerlink" title="导航站启用，博客正在被百度收录"></a>导航站启用，博客正在被百度收录</h2><p><a href="https://www.mubai.xyz/nav/">导航站</a></p><p><img src="https://www.ipicbed.com/images/2022/01/30/nav.png"></p><p>可以通过导航站直接访问到博客、gitee和github。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>番剧推荐</title>
      <link href="/posts/26.html"/>
      <url>/posts/26.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul><li>今天我推荐一部b站上高分萌系治愈番 — <strong>同居人是猫</strong></li><li>番号BV11t411s776，链接我放在这，<a href="https://www.bilibili.com/bangumi/media/md4762694/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.5#long">同居人是猫</a></li><li>总播放高达2356.6万，追番人数103万，评分9.7，关键是这部番居然是19年的番，what？不敢相信，作为一位常年在b站上摸爬滚打的老油条居然会错过这部番。</li></ul><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><img src="https://www.ipicbed.com/images/2022/01/29/ae641430b0c1939f89bf8169895e82f3.webp" alt="同居人是猫"></p><p>不擅长跟人接触，怕生的小说家·朏素晴与被人抛弃，过着残酷的流浪生活的猫。由于偶然的契机下一个人和一只猫开始了同居生活……？以人的视角和猫的视角来描绘每天的生活，各自的思绪互相交织在一起。故事以“温暖人心”为话题。随着琐碎时光的积累，我们成为了“家人”——两者找到了幸福的同居生活。</p><h2 id="动漫杂谈"><a href="#动漫杂谈" class="headerlink" title="动漫杂谈"></a>动漫杂谈</h2><p>真心觉得挺暖的，当看到猫姐（小阳）的妹妹不知道是饿死，还是被乌鸦戳死，毛姐回来发现妹妹已经倒在地上，弟弟不知所踪的表情以及茫然，直戳人泪点。  </p><p>主人公朏素晴，父母双亡（日漫标准配置），从小到大一直活在书中，有明显的社恐。但是自从遇到猫姐后，以及在死党矢坂大翔、编辑河濑先生、宠物店的押守小姐（主人公粉丝）的帮助下，让朏素晴走出了自己的世界，学会了如何与人相处，如何去发现生活中除了书本外的美丽事物。  </p><p>猫姐（小阳），一只被遗弃而成为流浪猫，而且还是其余4只小猫的大姐，她承担起照顾弟弟妹妹的责任。遇到好心的虎姐和刀子嘴豆腐心的黑哥，教会了猫姐很多生存的本领。后来有两只贪玩的弟弟妹妹被人捡到领养，一只猫妹妹被乌鸦戳死，另一只猫弟弟不知所踪。我感觉猫姐的世界都崩塌了，直到遇到了主人公朏素晴，经过一段时间的相处，她又明确了自己的目标，保护主人公朏素晴。  </p><p>主人公朏素晴和猫姐，相互关心却又不知道对方想什么，但是他们还是能快乐的一起生活。这部番从双视角去阐述故事，是一部有治愈、有搞笑的好番。</p>]]></content>
      
      
      <categories>
          
          <category> 动漫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 番剧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于vue2的天气查询</title>
      <link href="/posts/25.html"/>
      <url>/posts/25.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul><li>这个是项目是对<a href="https://www.mubai.xyz/posts/12.html">基于vue的天气预报</a>的重构</li><li>项目已上线，现在可以通过访问<a href="http://dfmubai.gitee.io/vue_weather">天气查询</a>来使用该项目。</li></ul><h2 id="vue脚手架"><a href="#vue脚手架" class="headerlink" title="vue脚手架"></a>vue脚手架</h2><p>Vue CLI 是一个基于 Vue.js 进行快速开发的完整系统，提供：</p><ul><li>通过 @vue/cli 实现的交互式的项目脚手架。</li><li>通过 @vue/cli + @vue/cli-service-global 实现的零配置原型开发。</li><li>一个运行时依赖 (@vue/cli-service)，该依赖：<ul><li>可升级；</li><li>基于 webpack 构建，并带有合理的默认配置；</li><li>可以通过项目内的配置文件进行配置；</li><li>可以通过插件进行扩展。</li></ul></li><li>一个丰富的官方插件集合，集成了前端生态中最好的工具。</li><li>一套完全图形化的创建和管理 Vue.js 项目的用户界面。</li></ul><h2 id="实现功能"><a href="#实现功能" class="headerlink" title="实现功能"></a>实现功能</h2><p>输入城市名称就可以查询到未来5天的天气情况。</p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> Vue </tag>
            
            <tag> Ajax </tag>
            
            <tag> Axios </tag>
            
            <tag> Vant </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于vue2的校园实时防疫监控</title>
      <link href="/posts/24.html"/>
      <url>/posts/24.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>项目已上线，现在可以通过访问<a href="http://www.mubai.xyz/vue-ncov/">基于vue的校园实时防疫监控</a>来使用。</p><h1 id="基于vue的校园实时防疫监控"><a href="#基于vue的校园实时防疫监控" class="headerlink" title="基于vue的校园实时防疫监控"></a>基于vue的校园实时防疫监控</h1><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ol><li>Vue基础知识</li><li>Axios网络请求</li><li>Echarts可视化</li><li>Swiper焦点轮播图</li><li>Vue-Router</li><li>封装组件</li></ol><h2 id="可使用地址"><a href="#可使用地址" class="headerlink" title="可使用地址"></a>可使用地址</h2><p>用友：<a href="https://api.yonyoucloud.com/apilink/#/">https://api.yonyoucloud.com/apilink/#/</a><br>天行：<a href="https://www.tianapi.com/">https://www.tianapi.com/</a></p><h2 id="项目运行"><a href="#项目运行" class="headerlink" title="项目运行"></a>项目运行</h2><ol><li>安装依赖<pre class="line-numbers language-js" data-language="js"><code class="language-js">npm i<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>开发环境下运行<pre class="line-numbers language-js" data-language="js"><code class="language-js">npm run serve<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>或者生产环境下运行<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 安装依赖</span>npm i <span class="token operator">-</span>g serve<span class="token comment">// 项目打包</span>npm i build<span class="token comment">// 项目本地预览</span>serve <span class="token operator">-</span>s dist<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="https://www.ipicbed.com/images/2022/01/06/vue-nocv-0fed2e615278bf3e.png" alt="vue-nocv-0fed2e615278bf3e.png"><br><img src="https://www.ipicbed.com/images/2022/01/06/vue-nocv--cbf133fae3ef9f5c.png" alt="vue-nocv--cbf133fae3ef9f5c.png"><br><img src="https://www.ipicbed.com/images/2022/01/06/vue-nocv--.png" alt="vue-nocv--.png"><br><img src="https://www.ipicbed.com/images/2022/01/06/vue-nocv-.png" alt="vue-nocv-.png"><br><img src="https://www.ipicbed.com/images/2022/01/06/vue-nocv-cddf4d6d12ed7174.png" alt="vue-nocv-cddf4d6d12ed7174.png"><br><img src="https://www.ipicbed.com/images/2022/01/06/vue-nocv-5578ed07b919965a.png" alt="vue-nocv-5578ed07b919965a.png"></p><h2 id="开发过程中的思维方式"><a href="#开发过程中的思维方式" class="headerlink" title="开发过程中的思维方式"></a>开发过程中的思维方式</h2><ol><li>在Vue框架中，是组件式开发，将组件分离的更加细致一点</li></ol><h2 id="关于组件实例化问题"><a href="#关于组件实例化问题" class="headerlink" title="关于组件实例化问题"></a>关于组件实例化问题</h2><ol><li>拆分中组件之后，组件的多次调用，会每一次实例化一个独立的对象</li></ol><h2 id="未解决问题"><a href="#未解决问题" class="headerlink" title="未解决问题"></a>未解决问题</h2><ol><li>跨域问题(主要由后端解决)<ul><li>开发环境<br>  开发环境下的跨域处理，只能在开发环境下运行，打包之后是不能运行的<br>  proxy都是开发环境跨域</li><li>生产环境<br>  cors(主)<br>  jsonp(次)</li></ul></li><li>打包路径问题<br> publicPath指定具体子路径信息 <pre class="line-numbers language-js" data-language="js"><code class="language-js">publicPath<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">'production'</span> <span class="token operator">?</span> <span class="token string">'/covid19'</span> <span class="token operator">:</span> <span class="token string">'/'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> Vue </tag>
            
            <tag> Ajax </tag>
            
            <tag> Axios </tag>
            
            <tag> Vant </tag>
            
            <tag> Vue-Router </tag>
            
            <tag> Echarts </tag>
            
            <tag> Swiper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Valine评论问题-已解决</title>
      <link href="/posts/23.html"/>
      <url>/posts/23.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul><li><p>自从valine更新后，通用的请求域名已经失效，根据github社区的大佬们讨论，添加了serverUrls后，理论上应该可以重新访问。</p></li><li><p>但是通过postman测试，访问的域名还是以前旧的通用域名。</p></li><li><p>更加离谱的是在重新刷新网页后就可以向新的域名发起请求并能获取到数据。而且每一次进去到博客，都要重新刷新网页清理缓存才能向新的域名发起正确的请求。</p></li></ul><h3 id="所以请各位访客想评论的话，就只能刷新页面，才能正常地进行评论。"><a href="#所以请各位访客想评论的话，就只能刷新页面，才能正常地进行评论。" class="headerlink" title="所以请各位访客想评论的话，就只能刷新页面，才能正常地进行评论。"></a>所以请各位访客想评论的话，就只能刷新页面，才能正常地进行评论。</h3><h2 id="leancloud国内版本和国外版本区别"><a href="#leancloud国内版本和国外版本区别" class="headerlink" title="leancloud国内版本和国外版本区别"></a>leancloud国内版本和国外版本区别</h2><p>国外版不需要实名，国内版需要实名制，所以，大部分会选择国外版本。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>我的博客是hexo+butterfly，评论系统用的是valine。然后leancloud更新后就不允许使用通用域名访问数据。</p><h2 id="解决方法-别人的"><a href="#解决方法-别人的" class="headerlink" title="解决方法(别人的)"></a>解决方法(别人的)</h2><p>CSDN上有位熊第就遇到和我一样的情况，他也给出了解决方法。<a href="https://blog.csdn.net/hubojing/article/details/121770387?spm=1001.2101.3001.6650.8&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-8.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-8.pc_relevant_default&amp;utm_relevant_index=12">【解决方法】Valine评论不显示</a></p><h2 id="解决方法-自己的"><a href="#解决方法-自己的" class="headerlink" title="解决方法(自己的)"></a>解决方法(自己的)</h2><p>我改用国内版，一切搞定…</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Valine </tag>
            
            <tag> Leancloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试高频题-this</title>
      <link href="/posts/22.html"/>
      <url>/posts/22.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul><li>this有四种绑定方式，分别是：默认绑定（window）、隐式绑定、硬绑定（显示绑定）、构造函数绑定（new）</li><li>this的指向在函数定义的时候是确定不了的，只有函数执行的时候才能确定this到底指向谁，实际上this的最终指向的是那个调用它的对象</li></ul><h2 id="面试高频题系列-—-this"><a href="#面试高频题系列-—-this" class="headerlink" title="面试高频题系列 — this"></a>面试高频题系列 — this</h2><h2 id="默认绑定（window）"><a href="#默认绑定（window）" class="headerlink" title="默认绑定（window）"></a>默认绑定（window）</h2><p>函数内不存在任何值，且在全局内调用函数</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">girl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">girl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 输出 window，这里相当于window.girl()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="隐式绑定"><a href="#隐式绑定" class="headerlink" title="隐式绑定"></a>隐式绑定</h2><p>函数里面有值，指向函数内部的值</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> girl <span class="token operator">=</span> <span class="token punctuation">{</span>name <span class="token operator">:</span> <span class="token string">'zs'</span><span class="token function-variable function">detail</span> <span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>girl<span class="token punctuation">.</span><span class="token function">detail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 输出 zs</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="硬绑定（显示绑定）"><a href="#硬绑定（显示绑定）" class="headerlink" title="硬绑定（显示绑定）"></a>硬绑定（显示绑定）</h2><p>在对象外部定义另一个含有相关属性值的对象，然后通过**call()、apply()、bind()**重定义对象里面的this的指向。最后使this指向新的指定对象（比如girl1、girl2）</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> girl <span class="token operator">=</span> <span class="token punctuation">{</span>name <span class="token operator">:</span> <span class="token string">'zs'</span><span class="token function-variable function">detail</span> <span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> girl1 <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span><span class="token string">'ls'</span><span class="token punctuation">}</span><span class="token keyword">var</span> girl2 <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span><span class="token string">'ww'</span><span class="token punctuation">}</span><span class="token comment">// call apply bind 为显示绑定</span>girl<span class="token punctuation">.</span><span class="token function">detail</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>girl1<span class="token punctuation">)</span> <span class="token comment">// 输出 ls</span>girl<span class="token punctuation">.</span><span class="token function">detail</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>girl2<span class="token punctuation">)</span> <span class="token comment">// 输出 ww</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="构造函数绑定"><a href="#构造函数绑定" class="headerlink" title="构造函数绑定"></a>构造函数绑定</h2><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Lover</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">detail</span> <span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'zs'</span><span class="token keyword">var</span> xH <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Lover</span><span class="token punctuation">(</span><span class="token string">'xh'</span><span class="token punctuation">)</span>xH<span class="token punctuation">.</span>detail<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 输出 ww</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>this的指向在函数创建的时候是决定不了的，在调用的时候才能决定，谁调用的就指向谁，一定要搞清楚这个。</p><h3 id="最后推荐看一下一位博主总结的this指向问题-以及b站蛋老师的视频"><a href="#最后推荐看一下一位博主总结的this指向问题-以及b站蛋老师的视频" class="headerlink" title="最后推荐看一下一位博主总结的this指向问题,以及b站蛋老师的视频"></a>最后推荐看一下一位博主总结的this指向问题,以及b站蛋老师的视频</h3><p><a href="https://www.cnblogs.com/pssp/p/5216085.html">追梦子-彻底理解js中this的指向，不必硬背。</a></p><iframe src="//player.bilibili.com/player.html?aid=71894678&amp;bvid=BV1BE411677T&amp;cid=124574863&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="100%" height="700"> </iframe>]]></content>
      
      
      <categories>
          
          <category> 面试高频题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> this </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git远程仓库</title>
      <link href="/posts/21.html"/>
      <url>/posts/21.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><strong>Git远程仓库</strong></p><ul><li><p>Git 并不像 SVN 那样有个中心服务器。</p></li><li><p>目前我们使用到的 Git 命令都是在本地执行，如果你想通过 Git 分享你的代码或者与其他开发人员合作。 你就需要将数据放到一台其他开发人员能够连接的服务器上。</p></li></ul><h2 id="Git远程仓库"><a href="#Git远程仓库" class="headerlink" title="Git远程仓库"></a>Git远程仓库</h2><ul><li><p>Git中存在两种类型的仓库，即本地仓库和远程仓库。</p></li><li><p>我们可以借助互联网上提供的一些代码托管服务来实现，其中比较常用的有GitHub、码云、GitLab（公司使用）等。 </p></li><li><p>gitHub（ 地址：<a href="https://github.com/">https://github.com/</a> ）是一个面向开源及私有软件项目的托管平台，因为只支持 Git 作为唯一的版本库格式进行托管，故名gitHub </p></li><li><p>码云（地址： <a href="https://gitee.com/">https://gitee.com/</a> ）是国内的一个代码托管平台，由于服务器在国内，所以相比于 GitHub，码云速度会更快 GitLab （地址： <a href="https://about.gitlab.com/">https://about.gitlab.com/</a> ）是一个用于仓库管理系统的开源项目，使用Git作 为代码管理工具，并在此基础上搭建起来的web服务,一般用于在企业、学校等内部网络搭建git私服。</p></li></ul><h3 id="前提：必须有公钥"><a href="#前提：必须有公钥" class="headerlink" title="前提：必须有公钥"></a>前提：必须有公钥</h3><p>若没有公钥，需要先生成公钥</p><p>生成SSH公钥<br>ssh-keygen -t rsa</p><p>不断回车<br>如果公钥已经存在，则自动覆盖<br>Gitee设置账户共公钥</p><p>获取公钥<br>cat ~/.ssh/id_rsa.pub</p><p>验证是否配置成功<br>ssh -T <a href="mailto:git@gitee.com">git@gitee.com</a></p><h3 id="1、-操作远程仓库"><a href="#1、-操作远程仓库" class="headerlink" title="1、 操作远程仓库"></a><strong>1、 操作远程仓库</strong></h3><h4 id="1-1、添加远程仓库"><a href="#1-1、添加远程仓库" class="headerlink" title="1.1、添加远程仓库"></a><strong>1.1、添加远程仓库</strong></h4><p><strong>此操作是先初始化本地库，然后与已创建的远程库进行对接</strong>。</p><p>命令： <strong>git remote add &lt;远端名称（一般为origin）&gt; &lt;仓库路径（ssh地址）&gt;</strong></p><p>远端名称，默认是origin，取决于远端服务器设置</p><p>仓库路径，从远端服务器获取此URL</p><p>例如: git remote add origin <a href="mailto:git@gitee.com">git@gitee.com</a>:czbk_zhang_meng/git_test.git</p><h4 id="1-2、查看远程仓库"><a href="#1-2、查看远程仓库" class="headerlink" title="1.2、查看远程仓库"></a><strong>1.2、查看远程仓库</strong></h4><p>命令：<strong>git remote</strong></p><p>出现origin（远端名称）表示成功</p><h4 id="1-3、推送到远程仓库"><a href="#1-3、推送到远程仓库" class="headerlink" title="1.3、推送到远程仓库"></a><strong>1.3、推送到远程仓库</strong></h4><p>命令：git push [-f] [–set-upstream] [远端名称 [本地分支名][:远端分支名] ]</p><p>如果远程分支名和本地分支名称相同，则可以只写本地分支</p><p><strong>git push origin master（使用情景：远程仓库为空）</strong></p><ul><li><p>-f 表示强制覆盖（一般禁用，只允许添加，不允许覆盖）</p></li><li><p>–set-upstream 推送到远端的同时并且建立起和远端分支的关联关系。</p><p>  <strong>git push –set-upstream origin master（使用情景：远程仓库不为空，用于绑定关系，建议第一次推送就加上）</strong></p></li></ul><p>如果<strong>当前分支已经和远端分支关联</strong>，则可以省略分支名和远端名。</p><p>git push 将 master 分支推送到已关联的远端分支。</p><h4 id="1-4、-本地分支与远程分支的关联关系"><a href="#1-4、-本地分支与远程分支的关联关系" class="headerlink" title="1.4、 本地分支与远程分支的关联关系"></a><strong>1.4、 本地分支与远程分支的关联关系</strong></h4><p>查看关联关系我们可以使用 git branch -vv 命令</p><h4 id="1-5、从远程仓库克隆"><a href="#1-5、从远程仓库克隆" class="headerlink" title="1.5、从远程仓库克隆"></a><strong>1.5、从远程仓库克隆</strong></h4><p>如果已经有一个远端仓库，我们可以直接clone到本地。</p><p>命令: git clone &lt;仓库路径&gt; [本地目录]</p><p>本地目录可以省略，会自动生成一个目录</p><h4 id="1-6、从远程仓库中抓取和拉取"><a href="#1-6、从远程仓库中抓取和拉取" class="headerlink" title="1.6、从远程仓库中抓取和拉取"></a><strong>1.6、从远程仓库中抓取和拉取</strong></h4><p>远程分支和本地的分支一样，我们可以进行merge操作，只是需要先把远端仓库里的更新都下载到本地，再进行操作。</p><ul><li><p><strong>抓取 命令：git fetch [remote name] [branch name]</strong></p><ul><li><strong>抓取指令就是将仓库里的更新都抓取到本地，不会进行合并，后续还要自己进行（merge合并分支）</strong></li><li>如果不指定远端名称和分支名，则抓取所有分支</li></ul></li><li><p><strong>拉取 命令：git pull [remote name] [branch name]</strong></p><ul><li><strong>拉取指令就是将远端仓库的修改拉到本地并自动进行合并，等同于fetch+merge</strong></li><li>如果不指定远端名称和分支名，则抓取所有并更新当前分支。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git分支</title>
      <link href="/posts/20.html"/>
      <url>/posts/20.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><strong>Git分支</strong></p><ul><li>几乎每一种版本控制系统都以某种形式支持分支。使用分支意味着你可以从开发主线上分离开来，然后在不影响主线的同时继续工作。</li><li>有人把 Git 的分支模型称为必杀技特性，而正是因为它，将 Git 从版本控制系统家族里区分出来。</li></ul><p><strong>Git远程仓库</strong></p><ul><li>Git 并不像 SVN 那样有个中心服务器。</li><li>目前我们使用到的 Git 命令都是在本地执行，如果你想通过 Git 分享你的代码或者与其他开发人员合作。 你就需要将数据放到一台其他开发人员能够连接的服务器上。</li></ul><h2 id="Git分支"><a href="#Git分支" class="headerlink" title="Git分支"></a>Git分支</h2><p>几乎所有的版本控制系统都以某种形式支持分支。 使用分支意味着你可以把你的工作从开发主线上分离开来进行重大的Bug修改、开发新的功能，以免影响开发主线。</p><h3 id="1、查看本地分支"><a href="#1、查看本地分支" class="headerlink" title="1、查看本地分支"></a><strong>1、查看本地分支</strong></h3><p>命令：<strong>git branch</strong></p><h3 id="2、创建本地分支"><a href="#2、创建本地分支" class="headerlink" title="2、创建本地分支"></a><strong>2、创建本地分支</strong></h3><p>命令：<strong>git branch 分支名</strong></p><h3 id="3、切换分支-checkout"><a href="#3、切换分支-checkout" class="headerlink" title="*3、切换分支(checkout)**"></a>*<em>3、</em>切换分支(checkout)**</h3><p>命令：<strong>git checkout 分支名</strong></p><p>我们还可以直接切换到一个不存在的分支（创建并切换）</p><p>命令：git checkout -b 分支名</p><h3 id="4、合并分支-merge"><a href="#4、合并分支-merge" class="headerlink" title="4、合并分支(merge)"></a><strong>4、合并分支(merge)</strong></h3><p>一个分支上的提交可以合并到另一个分支</p><p>命令：<strong>git merge 分支名称</strong></p><h3 id="5、删除分支"><a href="#5、删除分支" class="headerlink" title="5、删除分支"></a><strong>5、删除分支</strong></h3><p><strong>不能删除当前分支，只能删除其他分支</strong></p><p>git branch -d b1 删除分支时，需要做各种检查</p><p>git branch -D b1 不做任何检查，强制删除</p><h3 id="6、解决冲突"><a href="#6、解决冲突" class="headerlink" title="6、解决冲突"></a><strong>6、解决冲突</strong></h3><p>当两个分支上对文件的修改可能会存在冲突，例如同时修改了同一个文件的同一行，这时就需要手动解</p><p>决冲突，解决冲突步骤如下：</p><pre><code>(1) 处理文件中冲突的地方(2) 将解决完冲突的文件加入暂存区(add)(3) 提交到仓库(commit)</code></pre><p>冲突部分的内容处理如下所示：</p><p><img src="https://www.ipicbed.com/images/2022/01/22/cc7066cade0803da8695f78642950dd6.png" alt="https://www.ipicbed.com/images/2022/01/22/cc7066cade0803da8695f78642950dd6.png"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git基础</title>
      <link href="/posts/19.html"/>
      <url>/posts/19.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul><li>Git是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。</li><li>也是Linus Torvalds为了帮助管理Linux内核开发而开发的一个开放源码的版本控制软件。</li></ul><h1 id="git基础配置"><a href="#git基础配置" class="headerlink" title="git基础配置"></a>git基础配置</h1><h3 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h3><ul><li>Git GUI：Git提供的图形界面工具</li><li>Git Bash：Git提供的命令行工具</li></ul><ol><li><p>打开Git Bash</p></li><li><p>设置用户信息</p><ul><li><p>git config –global user.name “itcast”</p></li><li><p>git config –global user.email “<a href="mailto:hello@itcast.cn">hello@itcast.cn</a>”</p></li></ul></li><li><p>查看配置信息</p><ul><li><p>git config –global user.name</p></li><li><p>git config –global user.email</p></li></ul></li></ol><h1 id="git基础操作指令"><a href="#git基础操作指令" class="headerlink" title="git基础操作指令"></a>git基础操作指令</h1><p>Git工作目录下对于文件的<strong>修改</strong>(增加、删除、更新)会存在几个状态，这些<strong>修改</strong>的状态会随着我们执行Git的命令而发生变化。</p><p><img src="https://www.ipicbed.com/images/2022/01/22/git.png" alt="https://www.ipicbed.com/images/2022/01/22/git.png"></p><p>主要命令：</p><p><strong>1. git add (工作区 –&gt; 暂存区)</strong> </p><p><strong>2. git commit (暂存区 –&gt; 本地仓库)</strong></p><p><strong>3.1 查看修改的状态（status）</strong></p><p>作用：查看的修改的状态（暂存区、工作区）</p><p>命令形式：<strong>git status</strong></p><p><strong>3.2 添加工作区到暂存区(add)</strong></p><p>作用：添加工作区一个或多个文件的修改到暂存区</p><p>命令形式：git add 单个文件名/通配符</p><p>将所有修改加入暂存区：<strong>git add .</strong></p><p><strong>3.3 提交暂存区到本地仓库(commit)</strong></p><p>作用：提交暂存区内容到本地仓库的当前分支</p><p>命令形式：<strong>git commit -m ‘注释内容’</strong></p><p><strong>3.4 查看提交日志(log)</strong></p><p><strong>在 3.1 中配置的别名 **<em>git-log</em></strong> 就包含了这些参数，所以后续可以直接使用指令 git-log**</p><ul><li><p>作用:查看提交记录</p></li><li><p>命令形式：git log [option]</p></li><li><p>options</p><ul><li>-all 显示所有分支</li><li>-pretty=oneline 将提交信息显示为一行</li><li>-abbrev-commit 使得输出的commitId更简短</li><li>-graph 以图的形式显示</li></ul></li></ul><p><strong>3.5 版本回退</strong></p><p>作用：版本切换</p><p>命令形式：<strong>git reset –hard commitID</strong></p><p>commitID 可以使用 git-log 或 git log 指令查看</p><p>如何查看已经删除的记录？</p><p>git reflflog</p><p>这个指令可以看到已经删除的提交记录</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node连接mysql</title>
      <link href="/posts/18.html"/>
      <url>/posts/18.html</url>
      
        <content type="html"><![CDATA[<h3 id="前提：安装插件express（4-17-1）和mysql（2-2-5），配置package-json（添加type属性）"><a href="#前提：安装插件express（4-17-1）和mysql（2-2-5），配置package-json（添加type属性）" class="headerlink" title="前提：安装插件express（4.17.1）和mysql（2.2.5），配置package.json（添加type属性）"></a>前提：安装插件express（4.17.1）和mysql（2.2.5），配置package.json（添加type属性）</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">npm i express@4<span class="token punctuation">.</span>17<span class="token punctuation">.</span>1 mysql2@2<span class="token punctuation">.</span>2<span class="token punctuation">.</span>5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加type属性，值为module。目的是支持es6语法</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"module"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>创建db数据库操作模块（连接池）</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// db文件夹下index.js</span><span class="token keyword">import</span> mysql <span class="token keyword">from</span> <span class="token string">'mysql2'</span><span class="token keyword">const</span> pool <span class="token operator">=</span> mysql<span class="token punctuation">.</span><span class="token function">createPool</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  host<span class="token operator">:</span> <span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token comment">// 地址</span>  port<span class="token operator">:</span> <span class="token string">'3306'</span><span class="token punctuation">,</span>  database<span class="token operator">:</span> <span class="token string">'数据库名字'</span><span class="token punctuation">,</span>  user<span class="token operator">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>  password<span class="token operator">:</span><span class="token string">'123456'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> pool<span class="token punctuation">.</span><span class="token function">promise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建并封装对数据库需要执行的方法(可以不封装，直接将代码写在路由模块里面)</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// contyller文件夹下user_ctrl.js</span><span class="token keyword">import</span> db <span class="token keyword">from</span> <span class="token string">'../db/index.js'</span><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getAllUser</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>data<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">'select * from user'</span><span class="token punctuation">)</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    status<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    message<span class="token operator">:</span> <span class="token string">'success'</span><span class="token punctuation">,</span>    data  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建路由</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// router文件夹下userRouter.js</span><span class="token keyword">import</span> express <span class="token keyword">from</span> <span class="token string">'express'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> getAllUser <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../controller/user_ctrl.js'</span> <span class="token comment">// 按需导入操作数据库的方法</span><span class="token keyword">const</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">,</span> getAllUser<span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> router<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建服务器</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// app.js</span><span class="token keyword">import</span> express <span class="token keyword">from</span> <span class="token string">'express'</span><span class="token keyword">import</span> <span class="token punctuation">{</span>userRouter<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./router/userRouter.js'</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 第一个参数是可选</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/api'</span><span class="token punctuation">,</span>userRouter<span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">'80'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'running at http://127.0.0.1'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> nodejs </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关系型数据库和非关系型数据库</title>
      <link href="/posts/17.html"/>
      <url>/posts/17.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、关系型数据库"><a href="#一、关系型数据库" class="headerlink" title="一、关系型数据库"></a><strong>一、关系型数据库</strong></h2><p>关系型数据库最典型的数据结构是表，由二维表及其之间的联系所组成的一个数据组织。<br><img src="https://images2017.cnblogs.com/blog/1013528/201709/1013528-20170926113945323-238845177.png"></p><h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h3><ol><li>易于维护：都是使用表结构，格式一致；</li><li>使用方便：SQL语言通用，可用于复杂查询；</li><li>复杂操作：支持SQL，可用于一个表以及多个表之间非常复杂的查询。</li></ol><h3 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h3><ol><li>读写性能比较差，尤其是海量数据的高效率读写；</li><li>固定的表结构，灵活度稍欠；</li><li>高并发读写需求，传统关系型数据库来说，硬盘I/O是一个很大的瓶颈。</li></ol><h2 id="二、非关系型数据库"><a href="#二、非关系型数据库" class="headerlink" title="二、非关系型数据库"></a><strong>二、非关系型数据库</strong></h2><p>非关系型数据库严格上不是一种数据库，应该是一种数据结构化存储方法的集合，可以是文档或者键值对等。<br><img src="https://images2017.cnblogs.com/blog/1013528/201709/1013528-20170926114007198-781865994.png"></p><h3 id="优点：-1"><a href="#优点：-1" class="headerlink" title="优点："></a>优点：</h3><ol><li>格式灵活：存储数据的格式可以是key,value形式、文档形式、图片形式等等，文档形式、图片形式等等，使用灵活，应用场景广泛，而关系型数据库则只支持基础类型。</li><li>速度快：nosql可以使用硬盘或者随机存储器作为载体，而关系型数据库只能使用硬盘；</li><li>高扩展性；</li><li>成本低：nosql数据库部署简单，基本都是开源软件。</li></ol><h3 id="缺点：-1"><a href="#缺点：-1" class="headerlink" title="缺点："></a>缺点：</h3><ol><li>不提供sql支持，学习和使用成本较高；</li><li>无事务处理；</li><li>数据结构相对复杂，复杂查询方面稍欠。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo相关指令</title>
      <link href="/posts/16.html"/>
      <url>/posts/16.html</url>
      
        <content type="html"><![CDATA[<p>时隔多日，我又来更新我的小博客咯~</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>前一阵子忙于学习和找工作，导致没有时间经营我的小博客，现在我又回来了。</li><li>过了一段时间，我发现我忘记了hexo的相关指令，于是决定在这里记录下来，并置顶，这样一来就不怕忘记咯~</li></ul><h2 id="Hexo常见指令"><a href="#Hexo常见指令" class="headerlink" title="Hexo常见指令"></a>Hexo常见指令</h2><pre class="line-numbers language-none"><code class="language-none">&lt;!-- 新建一篇文章 --&gt;$ hexo new "文章标题"&lt;!-- 清理缓存 --&gt;$ hexo clean&lt;!-- 生成静态文件 --&gt;$ hexo g&lt;!-- 开启本地服务器，默认端口http://127.0.0.1:4000 --&gt;$ hexo s&lt;!-- 部署网站 --&gt;$ hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上这些就够用了，更多指令，可以去Hexo官方文档查看<br><a href="https://hexo.io/zh-cn/docs/">Hexo中文文档</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>package.json分析</title>
      <link href="/posts/15.html"/>
      <url>/posts/15.html</url>
      
        <content type="html"><![CDATA[<h2 id="package-json里常见的配置"><a href="#package-json里常见的配置" class="headerlink" title="package.json里常见的配置"></a>package.json里常见的配置</h2><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"webpack-text"</span><span class="token punctuation">,</span><span class="token comment">//版本</span>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>  <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"index.js"</span><span class="token punctuation">,</span><span class="token comment">// 存储命令的别名</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span><span class="token punctuation">,</span>    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"webpack"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"keywords"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span><span class="token comment">// 项目遵循的协议 默认ISC协议（就是开发源代码的协议）</span>  <span class="token property">"license"</span><span class="token operator">:</span> <span class="token string">"ISC"</span><span class="token punctuation">,</span><span class="token comment">//开发依赖</span>  <span class="token property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"css-loader"</span><span class="token operator">:</span> <span class="token string">"^6.5.1"</span><span class="token punctuation">,</span>    <span class="token property">"html-loader"</span><span class="token operator">:</span> <span class="token string">"^3.0.1"</span><span class="token punctuation">,</span>    <span class="token property">"html-webpack-plugin"</span><span class="token operator">:</span> <span class="token string">"^5.5.0"</span><span class="token punctuation">,</span>    <span class="token property">"style-loader"</span><span class="token operator">:</span> <span class="token string">"^3.3.1"</span><span class="token punctuation">,</span>    <span class="token property">"ts-loader"</span><span class="token operator">:</span> <span class="token string">"^9.2.6"</span><span class="token punctuation">,</span>    <span class="token property">"vue-loader"</span><span class="token operator">:</span> <span class="token string">"^15.9.8"</span><span class="token punctuation">,</span>    <span class="token property">"vue-template-compiler"</span><span class="token operator">:</span> <span class="token string">"^2.6.14"</span><span class="token punctuation">,</span>    <span class="token property">"webpack"</span><span class="token operator">:</span> <span class="token string">"^5.64.1"</span><span class="token punctuation">,</span>    <span class="token property">"webpack-cli"</span><span class="token operator">:</span> <span class="token string">"^4.9.1"</span><span class="token punctuation">,</span>    <span class="token property">"webpack-dev-server"</span><span class="token operator">:</span> <span class="token string">"^4.5.0"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token comment">//项目依赖</span>  <span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"jquery"</span><span class="token operator">:</span> <span class="token string">"^3.6.0"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://blog.csdn.net/weixin_62273462/article/details/121110931">npm安装package.json中的模块依赖_致敬code大神的博客-CSDN博客</a></p><blockquote><p><strong>npm一键安装package.json里的所有依赖文件</strong></p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">npm install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><blockquote><p><strong>dependencies（核心依赖/运行依赖 基本上是第三方包）</strong></p><p>只安装核心依赖项的指令</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">npm install <span class="token operator">--</span>dependencies<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><blockquote><p><strong>devDependencies（开发依赖）</strong></p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">npm install <span class="token operator">--</span>devDependencies<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MVVM和MVC</title>
      <link href="/posts/14.html"/>
      <url>/posts/14.html</url>
      
        <content type="html"><![CDATA[<h2 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h2><p>属于一种架构模式，核心思想是：数据驱动试图</p><p>好处是：</p><ol><li><p>低耦合</p></li><li><p>可重用性高</p></li><li><p>独立开发</p></li><li><p>可测试性</p></li></ol><blockquote><p><strong>详解MVVM</strong></p><p>M：<strong>业务数据模型</strong>和试图没关系</p><p>和java里面的service服务层一样</p><p>V：视图（view）</p><p>VM：视图数据模型，视图数据</p></blockquote><blockquote><p><strong>详解MVC</strong></p><p>M：<strong>业务数据模型</strong></p><p>一个或多个 JavaBean 对象，用于存储数据（实体模型，由 JavaBean 类创建）和处理业务逻辑（业务模型，由一般的 Java 类创建）。</p><p>V：是指用户界面（jsp）</p><p>一个或多个&nbsp;<a href="http://c.biancheng.net/jsp/">JSP</a>&nbsp;页面，向控制器提交数据和为模型提供数据显示，JSP 页面主要使用 HTML 标记和 JavaBean 标记来显示数据。</p><p>C：则是控制器（servlet）</p><p>一个或多个 Servlet 对象，根据视图提交的请求进行控制，即将请求转发给处理业务逻辑的 JavaBean，并将处理结果存放到实体模型 JavaBean 中，输出给视图显示。</p></blockquote><p>MVVM是参考MVC而来的</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于vue的音乐盒</title>
      <link href="/posts/13.html"/>
      <url>/posts/13.html</url>
      
        <content type="html"><![CDATA[<h2 id="demo介绍："><a href="#demo介绍：" class="headerlink" title="demo介绍："></a>demo介绍：</h2><p>通过在输入框输入歌曲名称，点击搜索按钮后，通过Axios向后台发送Ajax请求，这个demo我使用的是qq音乐api接口，可以获取相关的歌曲信息，比如评论、歌曲url等。然后将相关信息渲染到相应的位置。</p><h2 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h2><p><a href="http://www.axios-js.com/">Axios官网</a></p><h3 id="什么是-axios？"><a href="#什么是-axios？" class="headerlink" title="什么是 axios？"></a>什么是 axios？</h3><ul><li>Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。</li></ul><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul><li>从浏览器中创建 XMLHttpRequests</li><li>从 node.js 创建 http 请求</li><li>支持 Promise API</li><li>拦截请求和响应</li><li>转换请求数据和响应数据</li><li>取消请求</li><li>自动转换 JSON 数据</li><li>客户端支持防御 XSRF</li></ul><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*  1:歌曲搜索接口    请求地址:https://autumnfish.cn/search    请求方法:get    请求参数:keywords(查询关键字)    响应内容:歌曲搜索结果  2:歌曲url获取接口    请求地址:https://autumnfish.cn/song/url    请求方法:get    请求参数:id(歌曲id)    响应内容:歌曲url地址  3.歌曲详情获取    请求地址:https://autumnfish.cn/song/detail    请求方法:get    请求参数:ids(歌曲id)    响应内容:歌曲详情(包括封面信息)  4.热门评论获取    请求地址:https://autumnfish.cn/comment/hot?type=0    请求方法:get    请求参数:id(歌曲id,地址中的type固定为0)    响应内容:歌曲的热门评论  5.mv地址获取    请求地址:https://autumnfish.cn/mv/url    请求方法:get    请求参数:id(mvid,为0表示没有mv)    响应内容:mv的地址*/</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token operator">:</span> <span class="token string">'#player'</span><span class="token punctuation">,</span>  data<span class="token operator">:</span> <span class="token punctuation">{</span>    query<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    musicList<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment">// 歌曲地址</span>    musicUrl<span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token comment">// 封面地址</span>    picUrl<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token comment">// 热门评论</span>    hotComments<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    isPlaying<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token comment">// 遮罩层显示</span>    isShow<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token comment">// mv的地址</span>    mvUrl <span class="token operator">:</span> <span class="token string">''</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token comment">// 歌曲查询 result.data.songs</span>    <span class="token function-variable function">searchMusic</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> that <span class="token operator">=</span> <span class="token keyword">this</span>      axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'https://autumnfish.cn/search?keywords='</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>query<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        that<span class="token punctuation">.</span>musicList <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>result<span class="token punctuation">.</span>songs<span class="token punctuation">;</span>        <span class="token comment">// console.log(that.musicList);</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">// 音乐播放</span>    <span class="token function-variable function">playMusic</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">musicId</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// console.log(musicId);</span>      <span class="token keyword">var</span> that <span class="token operator">=</span> <span class="token keyword">this</span>      <span class="token keyword">var</span> mUrl <span class="token operator">=</span> <span class="token string">'https://music.163.com/song/media/outer/url?id='</span> <span class="token operator">+</span> musicId <span class="token operator">+</span> <span class="token string">'.mp3'</span>      that<span class="token punctuation">.</span>musicUrl <span class="token operator">=</span> mUrl      <span class="token comment">// 歌曲封面</span>      axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'https://api.imjad.cn/cloudmusic/?type=detail&amp;id='</span> <span class="token operator">+</span> musicId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// console.log(res.data.songs[0].al.picUrl);</span>        that<span class="token punctuation">.</span>picUrl <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>songs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>al<span class="token punctuation">.</span>picUrl<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 热门评论获取</span>      axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'https://autumnfish.cn/comment/hot?type=0&amp;id='</span> <span class="token operator">+</span> musicId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// console.log(res.data.hotComments);</span>        that<span class="token punctuation">.</span>hotComments <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>hotComments<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">// 播放</span>    <span class="token function-variable function">play</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>isPlaying <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">// 暂停 </span>    <span class="token function-variable function">pause</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>isPlaying <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">// 播放mv</span>    <span class="token function-variable function">playMv</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">mvid</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> that <span class="token operator">=</span> <span class="token keyword">this</span>      axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'https://autumnfish.cn/mv/url?id='</span> <span class="token operator">+</span> mvid<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        that<span class="token punctuation">.</span>isShow <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        that<span class="token punctuation">.</span>mvUrl <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data<span class="token punctuation">.</span>url<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">// 隐藏遮罩层</span>    <span class="token function-variable function">hide</span> <span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>isShow <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>mvUrl <span class="token operator">=</span> <span class="token string">''</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="效果："><a href="#效果：" class="headerlink" title="效果："></a>效果：</h3><p><img src="https://www.ipicbed.com/images/2021/12/28/2.png"></p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
            <tag> Ajax </tag>
            
            <tag> Axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于vue的天气预报</title>
      <link href="/posts/12.html"/>
      <url>/posts/12.html</url>
      
        <content type="html"><![CDATA[<h2 id="demo介绍："><a href="#demo介绍：" class="headerlink" title="demo介绍："></a>demo介绍：</h2><p>通过在输入框输入城市名称，点击搜索按钮后，通过Axios向后台发送Ajax请求，获取导数据后，将数据渲染到页面上。</p><h2 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h2><p><a href="http://www.axios-js.com/">Axios官网</a></p><h3 id="什么是-axios？"><a href="#什么是-axios？" class="headerlink" title="什么是 axios？"></a>什么是 axios？</h3><ul><li>Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。</li></ul><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul><li>从浏览器中创建 XMLHttpRequests</li><li>从 node.js 创建 http 请求</li><li>支持 Promise API</li><li>拦截请求和响应</li><li>转换请求数据和响应数据</li><li>取消请求</li><li>自动转换 JSON 数据</li><li>客户端支持防御 XSRF</li></ul><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*  请求地址:http://wthrcdn.etouch.cn/weather_mini  请求方法:get  请求参数:city(城市名)  响应内容:天气信息  1. 点击回车  2. 查询数据  3. 渲染数据  */</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token operator">:</span> <span class="token punctuation">{</span>        city<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        weatherList <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token function-variable function">searchWeather</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// console.log(this.city);</span>            <span class="token keyword">var</span> that <span class="token operator">=</span> <span class="token keyword">this</span>            axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'http://wthrcdn.etouch.cn/weather_mini?city='</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>city<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// console.log(res.data.data.forecast);</span>                that<span class="token punctuation">.</span>weatherList <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data<span class="token punctuation">.</span>forecast            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function-variable function">changeCity</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">city</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>city <span class="token operator">=</span> city            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">searchWeather</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="效果："><a href="#效果：" class="headerlink" title="效果："></a>效果：</h3><p><img src="https://www.ipicbed.com/images/2021/12/28/4c42e9ab5dcda63ef0099caf02abc6d4.png"></p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
            <tag> Ajax </tag>
            
            <tag> Axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PC端网页特效</title>
      <link href="/posts/11.html"/>
      <url>/posts/11.html</url>
      
        <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol><li>元素偏移量 offset 系列</li><li>元素可视区 client 系列</li><li>元素滚动 scroll 系列</li><li>动画函数封装</li><li>常见网页特效案例</li></ol><h2 id="1-元素偏移量-offset-系列"><a href="#1-元素偏移量-offset-系列" class="headerlink" title="1. 元素偏移量 offset 系列"></a>1. 元素偏移量 offset 系列</h2><ul><li><p><strong>1.1 offset 概述</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-0b1583e6ca4cee792.png" alt="Untitled-0b1583e6ca4cee792.png"></p></li><li><p><strong>1.2 offset 与 style 区别</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-1795cc27769d790f0.png" alt="Untitled-1795cc27769d790f0.png"></p></li><li><p><strong>案例</strong></p><ul><li><p><strong>获取鼠标在盒子内的坐标</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-26c1b84a4abb4976a.png" alt="Untitled-26c1b84a4abb4976a.png"></p>  <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>box<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mousemove'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> x <span class="token operator">=</span> e<span class="token punctuation">.</span>pageX <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>offsetLeft<span class="token punctuation">;</span><span class="token keyword">var</span> y <span class="token operator">=</span> e<span class="token punctuation">.</span>pageY <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>offsetTop<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'x坐标是'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">' y坐标是'</span> <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>模态框拖拽</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-3a10fff5b439d7e42.png" alt="Untitled-3a10fff5b439d7e42.png"></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-4d7143516aa33ecac.png" alt="Untitled-4d7143516aa33ecac.png"></p>  <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 1. 获取元素</span>        <span class="token keyword">var</span> login <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.login'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> mask <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.login-bg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> link <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#link'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> closeBtn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#closeBtn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> title <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#title'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 2. 点击弹出层这个链接 link  让mask 和login 显示出来</span>        link<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                mask<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'block'</span><span class="token punctuation">;</span>                login<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'block'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token comment">// 3. 点击 closeBtn 就隐藏 mask 和 login </span>        closeBtn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                mask<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span><span class="token punctuation">;</span>                login<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token comment">// 4. 开始拖拽</span>            <span class="token comment">// (1) 当我们鼠标按下， 就获得鼠标在盒子内的坐标</span>        title<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mousedown'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> x <span class="token operator">=</span> e<span class="token punctuation">.</span>pageX <span class="token operator">-</span> login<span class="token punctuation">.</span>offsetLeft<span class="token punctuation">;</span>            <span class="token keyword">var</span> y <span class="token operator">=</span> e<span class="token punctuation">.</span>pageY <span class="token operator">-</span> login<span class="token punctuation">.</span>offsetTop<span class="token punctuation">;</span>            <span class="token comment">// (2) 鼠标移动的时候，把鼠标在页面中的坐标，减去 鼠标在盒子内的坐标就是模态框的left和top值</span>            document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mousemove'</span><span class="token punctuation">,</span> move<span class="token punctuation">)</span>            <span class="token keyword">function</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                login<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> e<span class="token punctuation">.</span>pageX <span class="token operator">-</span> x <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>                login<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> e<span class="token punctuation">.</span>pageY <span class="token operator">-</span> y <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// (3) 鼠标弹起，就让鼠标移动事件移除</span>            document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mouseup'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                document<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'mousemove'</span><span class="token punctuation">,</span> move<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>仿京东放大镜</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-591793a0b2aefcf46.png" alt="Untitled-591793a0b2aefcf46.png"></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-62e609bf502c2a3be.png" alt="Untitled-62e609bf502c2a3be.png"></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-786cd6471201b2104.png" alt="Untitled-786cd6471201b2104.png"></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-8a3a0c566fd57533b.png" alt="Untitled-8a3a0c566fd57533b.png"></p></li></ul></li></ul><h2 id="2-元素可视区-client-系列"><a href="#2-元素可视区-client-系列" class="headerlink" title="2. 元素可视区 client 系列"></a>2. 元素可视区 client 系列</h2><ul><li><p><strong>2.2 client 系列的相关属性</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-9a1e2d21c88c29805.png" alt="Untitled-9a1e2d21c88c29805.png"></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-108c37851950d75696.png" alt="Untitled-108c37851950d75696.png"></p></li><li><p><strong>案例</strong></p><p>  <a href="https://www.notion.so/flexible-js-69346dc7d38044cdab9aeecdfda29f3f"><strong>淘宝 flexible.js 源码分析</strong></a></p><p>  <a href="https://www.notion.so/25e460852eb049de9e9307c07b4e44f2">仿淘宝固定右侧侧边栏</a></p></li></ul><h2 id="3-元素滚动-scroll-系列"><a href="#3-元素滚动-scroll-系列" class="headerlink" title="3. 元素滚动 scroll 系列"></a>3. 元素滚动 scroll 系列</h2><ul><li><p><strong>3.1 元素 scroll 系列属性</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-1117def1ae57cd58b6.png" alt="Untitled-1117def1ae57cd58b6.png"></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-123a533605d51cfa6f.png" alt="Untitled-123a533605d51cfa6f.png"></p></li><li><p><strong>3.2 页面被卷去的头部</strong></p><p>  如果浏览器的高（或宽）度不足以显示整个页面时，会自动出现滚动条。当滚动条向下滚动时，页面上面被隐藏</p></li><li><p><strong>3.3 页面被卷去的头部兼容性解决方案</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-13941ed433c1abc652.png" alt="Untitled-13941ed433c1abc652.png"></p></li><li><p><strong>案例</strong></p></li></ul><h2 id="三大系列总结"><a href="#三大系列总结" class="headerlink" title="三大系列总结"></a>三大系列总结</h2><ul><li><p><strong>三大系列区别</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-144b3be40caafd3a26.png" alt="Untitled-144b3be40caafd3a26.png"></p><ul><li><p>他们主要用法：</p><ol><li><p>offset系列 经常用于获得元素位置 offsetLeft offsetTop</p></li><li><p>client 经常用于获取元素大小 clientWidth clientHeight</p></li><li><p>scroll 经常用于获取滚动距离 scrollTop scrollLeft</p></li><li><p>注意页面滚动的距离通过 window.pageXOffset 获得</p></li></ol></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 前端 </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事件高级</title>
      <link href="/posts/10.html"/>
      <url>/posts/10.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-注册事件（绑定事件）"><a href="#1-注册事件（绑定事件）" class="headerlink" title="1. 注册事件（绑定事件）"></a><strong>1. 注册事件（绑定事件）</strong></h1><ul><li><p>1.1 注册事件概述<br>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled.png" alt="Untitled.png"></p></li><li><p>1.2 addEventListener 事件监听方式（重点）<br>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-1.png" alt="Untitled-1.png"></p></li><li><p>1.3 attachEvent 事件监听方式（了解）<br>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-2.png" alt="Untitled-2.png"></p></li><li><p>1.4 注册事件兼容性解决方案（了解）</p><p>  兼容性处理的原则： 首先照顾大多数浏览器，再处理特殊浏览器</p>  <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> eventName<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 判断当前浏览器是否支持 addEventListener 方法</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>addEventListener<span class="token punctuation">)</span> <span class="token punctuation">{</span> element<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>eventName<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 第三个参数 默认是false</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>attachEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span> element<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">'on'</span> <span class="token operator">+</span> eventName<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// 相当于 element.onclick = fn;</span> element<span class="token punctuation">[</span><span class="token string">'on'</span> <span class="token operator">+</span> eventName<span class="token punctuation">]</span> <span class="token operator">=</span> fn<span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="2-删除事件（解绑事件）"><a href="#2-删除事件（解绑事件）" class="headerlink" title="2. 删除事件（解绑事件）"></a>2. 删除事件（解绑事件）</h1><ul><li><p>2.1 删除事件的方式</p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-3.png" alt="Untitled-3.png"></p></li><li><p>2.2 删除事件兼容性解决方案（了解）</p>  <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> eventName<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 判断当前浏览器是否支持 removeEventListener 方法</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>removeEventListener<span class="token punctuation">)</span> <span class="token punctuation">{</span> element<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span>eventName<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 第三个参数 默认是false</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>detachEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span> element<span class="token punctuation">.</span><span class="token function">detachEvent</span><span class="token punctuation">(</span><span class="token string">'on'</span> <span class="token operator">+</span> eventName<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> element<span class="token punctuation">[</span><span class="token string">'on'</span> <span class="token operator">+</span> eventName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="3-DOM-事件流"><a href="#3-DOM-事件流" class="headerlink" title="3. DOM 事件流"></a><strong>3. DOM 事件流</strong></h1><ul><li><p>DOM 事件流</p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-4.png" alt="Untitled-4.png"></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-5.png" alt="Untitled-5.png"></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-6.png" alt="Untitled-6.png"></p></li></ul><h1 id="4-事件对象"><a href="#4-事件对象" class="headerlink" title="4. 事件对象"></a>4. 事件对象</h1><ul><li><p>4.1 什么是事件对象</p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-7.png" alt="Untitled-7.png"></p></li><li><p>4.2 事件对象的使用语法</p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-8.png" alt="Untitled-8.png"></p></li><li><p>4.3 事件对象的兼容性方案</p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-9.png" alt="Untitled-9.png"></p></li><li><p>4.4 事件对象的常见属性和方法</p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-10.png" alt="Untitled-10.png"></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-11.png" alt="Untitled-11.png"></p></li></ul><h1 id="5-阻止事件冒泡"><a href="#5-阻止事件冒泡" class="headerlink" title="5. 阻止事件冒泡"></a><strong>5. 阻止事件冒泡</strong></h1><ul><li><p>5.1 阻止事件冒泡的两种方式</p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-12.png" alt="Untitled-12.png"></p></li><li><p>5.2 阻止事件冒泡的兼容性解决方案</p>  <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">if</span><span class="token punctuation">(</span>e <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span>stopPropagation<span class="token punctuation">)</span><span class="token punctuation">{</span> e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span> window<span class="token punctuation">.</span>event<span class="token punctuation">.</span>cancelBubble <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="6-事件委托（代理、委派）"><a href="#6-事件委托（代理、委派）" class="headerlink" title="6. 事件委托（代理、委派）"></a>6. 事件委托（代理、委派）</h1><ul><li><p>事件委托</p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-13.png" alt="Untitled-13.png"></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-14.png" alt="Untitled-14.png"></p></li><li><p>案例</p>  <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 事件委托的核心原理：给父节点添加侦听器， 利用事件冒泡影响每一个子节点</span>        <span class="token keyword">var</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ul<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// alert('知否知否，点我应有弹框在手！');</span>            <span class="token comment">// e.target 这个可以得到我们点击的对象</span>            e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">'pink'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="7-常用的鼠标事件"><a href="#7-常用的鼠标事件" class="headerlink" title="7. 常用的鼠标事件"></a>7. 常用的鼠标事件</h1><ul><li><p>7.1 常用的鼠标事件</p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-15.png" alt="Untitled-15.png"></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-16.png" alt="Untitled-16.png"></p></li><li><p>7.2 鼠标事件对象</p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-17.png" alt="Untitled-17.png"></p></li></ul><h1 id="8-常用的键盘事件"><a href="#8-常用的键盘事件" class="headerlink" title="8. 常用的键盘事件"></a>8. 常用的键盘事件</h1><ul><li><p>8.1 常用键盘事件</p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-18.png" alt="Untitled-18.png"></p></li><li><p>8.2 键盘事件对象</p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-19.png" alt="Untitled-19.png"></p></li><li><p>8.3 ASCII 表</p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-20.png" alt="Untitled-20.png"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 前端 </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DOM文档对象模型</title>
      <link href="/posts/9.html"/>
      <url>/posts/9.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-DOM-简介"><a href="#1-DOM-简介" class="headerlink" title="1. DOM 简介"></a>1. DOM 简介</h1><ul><li><p><strong>1.1 什么是 DOM</strong></p><p>  文档对象模型（Document Object Model，简称 DOM），是 W3C 组织推荐的处理可扩展标记语言（HTML或者XML）的标准编程接口。</p><p>  W3C 已经定义了一系列的 DOM 接口，通过这些 DOM 接口可以改变网页的内容、结构和样式。</p></li><li><p><strong>1.2 DOM 树</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-0.png" alt="Untitled-0.png"></p></li></ul><h1 id="2-获取元素"><a href="#2-获取元素" class="headerlink" title="2. 获取元素"></a>2. 获取元素</h1><ul><li><p><strong>2.1 如何获取页面元素</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-1136fee93e0665545.png" alt="Untitled-1136fee93e0665545.png"></p></li><li><p><strong>2.2 根据 ID 获取</strong></p><p>  document.getElementById(‘id’);</p><p>  使用 console.dir() 可以打印我们获取的元素对象，更好的查看对象里面的属性和方法。</p></li><li><p><strong>2.3 根据标签名获取</strong></p><p>  document.getElementsByTagName(‘标签名’);</p><p>  注：使用 getElementsByTagName() 方法可以返回带有指定标签名的<strong>对象的集合</strong></p><p>  1.因为得到的是一个对象的集合，所以我们想要操作里面的元素就需要遍历。</p><p>  2.得到元素对象是动态的</p></li><li><p><strong>2.4 通过 HTML5 新增的方法获取</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-2abb35f958945dd1f.png" alt="Untitled-2abb35f958945dd1f.png"></p></li><li><p><strong>2.5 获取特殊元素（body，html）</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-38ef8d1a9652f40dd.png" alt="Untitled-38ef8d1a9652f40dd.png"></p></li></ul><h1 id="3-事件基础"><a href="#3-事件基础" class="headerlink" title="3. 事件基础"></a>3. 事件基础</h1><ul><li><p><strong>3.1 事件概述</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-465e7a6bb7436ff65.png" alt="Untitled-465e7a6bb7436ff65.png"></p></li><li><p><strong>3.2 事件三要素</strong></p><ol><li><p>事件源 （谁）</p></li><li><p>事件类型 （什么事件）</p></li><li><p>事件处理程序 （做啥）</p></li></ol></li><li><p><strong>3.3 执行事件的步骤</strong></p><ol><li><p>获取事件源</p></li><li><p>注册事件（绑定事件）</p></li><li><p>添加事件处理程序（采取函数赋值形式）</p></li></ol></li><li><p><strong>3.3常见的鼠标事件</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-5b9aa3dbd1480df3f.png" alt="Untitled-5b9aa3dbd1480df3f.png"></p></li></ul><h1 id="4-操作元素"><a href="#4-操作元素" class="headerlink" title="4. 操作元素"></a>4. 操作元素</h1><ul><li><p><strong>4.1 改变元素内容</strong></p><p>  <strong>常用的是element.innerHTML</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-6b10c34d9d3761331.png" alt="Untitled-6b10c34d9d3761331.png"></p></li><li><p><strong>4.2 常用元素的属性操作</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-7a84f512b4d79481d.png" alt="Untitled-7a84f512b4d79481d.png"></p></li><li><p><strong>4.3 表单元素的属性操作</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-8181271e166816396.png" alt="Untitled-8181271e166816396.png"></p></li><li><p><strong>4.4 样式属性操作</strong></p><ul><li><p><strong>操作元素的方法</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-8181271e166816396.png" alt="Untitled-8181271e166816396.png"></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-9e6772b85634bad0b.png" alt="Untitled-9e6772b85634bad0b.png"></p></li><li><p><strong>操作元素总结</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-10776fa11de24cda9e.png" alt="Untitled-10776fa11de24cda9e.png"></p></li></ul></li><li><p><strong>4.5 排他思想</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-1255e7f3c929f6c7bf.png" alt="Untitled-1255e7f3c929f6c7bf.png"></p></li><li><p><strong>4.6 自定义属性的操作</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-130f8225ebba282595.png" alt="Untitled-130f8225ebba282595.png"></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-1424cd4ef88357c118.png" alt="Untitled-1424cd4ef88357c118.png"></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-15ad4c71f93e8c99bf.png" alt="Untitled-15ad4c71f93e8c99bf.png"></p></li><li><p><strong>4.7 H5自定义属性</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-161a9a35fa5160f642.png" alt="Untitled-161a9a35fa5160f642.png"></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-1736d5a758f28fab2b.png" alt="Untitled-1736d5a758f28fab2b.png"></p></li><li><p><strong>案例</strong></p></li></ul><h1 id="5-节点操作"><a href="#5-节点操作" class="headerlink" title="5. 节点操作"></a>5. 节点操作</h1><ul><li><p><strong>5.1 为什么学节点操作</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-189c78cc1560c30c25.png" alt="Untitled-189c78cc1560c30c25.png"></p></li><li><p><strong>5.2 节点概述</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-199745832be4cafb83.png" alt="Untitled-199745832be4cafb83.png"></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-205fad0cc3bc4610c9.png" alt="Untitled-205fad0cc3bc4610c9.png"></p></li><li><p><strong>5.3 节点层级</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-21.png" alt="Untitled-21.png"></p><ul><li><p><strong>父级节点</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-22.png" alt="Untitled-22.png"></p></li><li><p><strong>子节点</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-23.png" alt="Untitled-23.png"></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-24.png" alt="Untitled-24.png"></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-25.png" alt="Untitled-25.png"></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-26.png" alt="Untitled-26.png"></p></li><li><p><strong>兄弟节点</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-27.png" alt="Untitled-27.png"></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-28.png" alt="Untitled-28.png"></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-29.png" alt="Untitled-29.png"></p></li></ul></li><li><p><strong>5.4 创建、添加、删除、复制节点</strong></p><ul><li><p><strong>创建节点</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-30.png" alt="Untitled-30.png"></p></li><li><p><strong>添加节点</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-31.png" alt="Untitled-31.png"></p></li><li><p><strong>删除节点</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-32.png" alt="Untitled-32.png"></p></li><li><p><strong>复制节点(克隆节点)</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-33.png" alt="Untitled-33.png"></p></li></ul></li><li><p><strong>5.5 三种动态创建元素区别</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-34.png" alt="Untitled-34.png"></p></li><li><p><strong>案例</strong></p></li></ul><h1 id="6-DOM-重点核心"><a href="#6-DOM-重点核心" class="headerlink" title="6. DOM 重点核心"></a>6. DOM 重点核心</h1><p><strong>关于dom操作，我们主要针对于元素的操作。主要有创建、增、删、改、查、属性操作、事件操作。</strong></p><ul><li><p><strong>6.1 创建</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-35.png" alt="Untitled-35.png"></p></li><li><p><strong>6.2 增</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-36.png" alt="Untitled-36.png"></p></li><li><p><strong>6.3 删</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-37.png" alt="Untitled-37.png"></p></li><li><p><strong>6.4 改</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-38.png" alt="Untitled-38.png"></p></li><li><p><strong>6.5 查</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-39.png" alt="Untitled-39.png"></p></li><li><p><strong>6.6 属性操作</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-40.png" alt="Untitled-40.png"></p></li><li><p><strong>6.7 事件操作</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/Untitled-41.png" alt="Untitled-41.png"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 前端 </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BOM浏览器对象模型</title>
      <link href="/posts/8.html"/>
      <url>/posts/8.html</url>
      
        <content type="html"><![CDATA[<h2 id="BOM特性"><a href="#BOM特性" class="headerlink" title="BOM特性"></a><strong>BOM特性</strong></h2><pre><code>浏览器对象模型把「浏览器」当做一个「对象」来看待BOM 的顶级对象是 windowBOM 学习的是浏览器窗口交互的一些对象BOM 是浏览器厂商在各自浏览器上定义的，兼容性较差</code></pre><h2 id="BOM构成"><a href="#BOM构成" class="headerlink" title="BOM构成"></a><strong>BOM构成</strong></h2><p><img src="https://www.ipicbed.com/images/2021/12/27/bom1.png" alt="bom1.png"></p><h2 id="BOM的各类方法（重点）"><a href="#BOM的各类方法（重点）" class="headerlink" title="BOM的各类方法（重点）"></a><strong>BOM的各类方法（重点）</strong></h2><ul><li><p>定时器</p><ul><li><p>setTimeout()</p>  <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>调用函数<span class="token punctuation">,</span> <span class="token punctuation">[</span>延迟的毫秒数<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  setTimeout() 这个调用函数我们也称为回调函数 callback<br>  普通函数是按照代码顺序直接调用。<br>  而这个函数，需要等待时间，时间到了才去调用这个函数，因此称为回调函数。<br>  简单理解： 回调，就是回头调用的意思。上一件事干完，再回头再调用这个函数。<br>  以前我们讲的 element.onclick = function(){} 或者 element.addEventListener(“click”, fn); 里面的 函数也是回调<br>  函数。</p></li><li><p>停止 setTimeout() 定时器</p>  <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">window<span class="token punctuation">.</span><span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeoutID<span class="token punctuation">)</span><span class="token comment">//clearTimeout()方法取消了先前通过调用 setTimeout() 建立的定时器。</span><span class="token comment">//注意：</span><span class="token comment">//1. window 可以省略。</span><span class="token comment">//2. 里面的参数就是定时器的标识符 。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>setInterval()</p>  <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">window<span class="token punctuation">.</span><span class="token function">setInterval</span><span class="token punctuation">(</span>回调函数<span class="token punctuation">,</span> <span class="token punctuation">[</span>间隔的毫秒数<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  setInterval() 方法重复调用一个函数，每隔这个时间，就去调用一次回调函数。</p><p>  <strong>注意：</strong></p><ol><li><p>window 可以省略。</p></li><li><p>这个调用函数可以直接写函数，或者写函数名或者采取字符串 ‘函数名()’ 三种形式。</p></li><li><p>间隔的毫秒数省略默认是 0，如果写，必须是毫秒，表示每隔多少毫秒就自动调用这个函数。</p></li><li><p>因为定时器可能有很多，所以我们经常给定时器赋值一个标识符。</p></li><li><p>第一次执行也是间隔毫秒数之后执行，之后每隔毫秒数就执行一次。</p></li></ol></li><li><p>停止 setInterval() 定时器</p>  <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">window<span class="token punctuation">.</span><span class="token function">clearInterval</span><span class="token punctuation">(</span>intervalID<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//clearInterval()方法取消了先前通过调用 setInterval()建立的定时器。</span><span class="token comment">//注意：</span><span class="token comment">//1. window 可以省略。</span><span class="token comment">//2. 里面的参数就是定时器的标识符 。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><pre><code>setTimeout()和setInterval()的区别setTimeout()只执行一次setInterval()会重复执行</code></pre><h2 id="BOM重点案例"><a href="#BOM重点案例" class="headerlink" title="BOM重点案例"></a><strong>BOM重点案例</strong></h2><ul><li><p>5秒后自动关闭的广告—setTimeout()</p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/bomtext01.png" alt="bomtext01.png"></p>  <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> ad <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.ad'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//ad为广告图片的类名</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ad<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>倒计时—setInterval()</p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/bomtext02.png" alt="bomtext02.png"></p>  <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> hour <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.hour'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> minute <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.minute'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> second <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.second'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> inputTime <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">'2021-9-20 20:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//最终时间</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setInterval</span><span class="token punctuation">(</span>countDown<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> nowTime <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回的是当前时间总的毫秒数</span>            <span class="token keyword">var</span> times <span class="token operator">=</span> <span class="token punctuation">(</span>inputTime <span class="token operator">-</span> nowTime<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">;</span> <span class="token comment">// times是剩余时间总的秒数 </span>            <span class="token keyword">var</span> h <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>times <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">%</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//时</span>            h <span class="token operator">=</span> h <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">'0'</span> <span class="token operator">+</span> h <span class="token operator">:</span> h<span class="token punctuation">;</span>            hour<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> h<span class="token punctuation">;</span> <span class="token comment">// 把剩余的小时给 小时黑色盒子</span>            <span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>times <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">%</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 分</span>            m <span class="token operator">=</span> m <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">'0'</span> <span class="token operator">+</span> m <span class="token operator">:</span> m<span class="token punctuation">;</span>            minute<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> m<span class="token punctuation">;</span>            <span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>times <span class="token operator">%</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 当前的秒</span>            s <span class="token operator">=</span> s <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">'0'</span> <span class="token operator">+</span> s <span class="token operator">:</span> s<span class="token punctuation">;</span>            second<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> s<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>发送短信—setInterval()</p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/bomtext03.png" alt="bomtext03.png"></p>  <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// 按钮点击之后，会禁用 disabled 为true </span><span class="token comment">// 同时按钮里面的内容会变化， 注意 button 里面的内容通过 innerHTML修改</span><span class="token comment">// 里面秒数是有变化的，因此需要用到定时器</span><span class="token comment">// 定义一个变量，在定时器里面，不断递减</span><span class="token comment">// 如果变量为0 说明到了时间，我们需要停止定时器，并且复原按钮初始状态</span>        <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> time <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 定义剩下的秒数</span>        btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            btn<span class="token punctuation">.</span>disabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">// 清除定时器和复原按钮</span>                    <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>                    btn<span class="token punctuation">.</span>disabled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    btn<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'发送'</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    btn<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'还剩下'</span> <span class="token operator">+</span> time <span class="token operator">+</span> <span class="token string">'秒'</span><span class="token punctuation">;</span>                    time<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>电子时钟—setInterval()</p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/bomtext04.png" alt="bomtext04.png"></p></li><li><p>5秒钟之后自动跳转页面—setInterval()</p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/bomtext05.png" alt="bomtext05.png"></p>  <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// console.log(location.href);</span>            location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">'http://www.itcast.cn'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>timer <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">'http://www.itcast.cn'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                div<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'您将在'</span> <span class="token operator">+</span> timer <span class="token operator">+</span> <span class="token string">'秒钟之后跳转到首页'</span><span class="token punctuation">;</span>                timer<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>获取 URL 参数数据—location 对象</p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/bomtext06.png" alt="bomtext06.png"></p>  <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>search<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ?uname=andy</span>        <span class="token comment">// 1.先去掉？  substr('起始的位置'，截取几个字符); 切片</span>        <span class="token keyword">var</span> params <span class="token operator">=</span> location<span class="token punctuation">.</span>search<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// uname=andy</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 2. 利用=把字符串分割为数组 split('=');</span>        <span class="token keyword">var</span> arr <span class="token operator">=</span> params<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["uname", "ANDY"]</span>        <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 3.把数据写入div中</span>        div<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'欢迎您'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="JS执行机制"><a href="#JS执行机制" class="headerlink" title="JS执行机制"></a><strong>JS执行机制</strong></h2><h3 id="同步和异步的概念："><a href="#同步和异步的概念：" class="headerlink" title="同步和异步的概念："></a>同步和异步的概念：</h3><ul><li><p>同步</p><p>  前一个任务结束后再执行后一个任务，程序的执行顺序与任务的排列顺序是一致的、同步的。比如做饭的同步做法：我们要烧水煮饭，等水开了（10分钟之后），再去切菜，炒菜。</p></li><li><p>异步</p><p>  你在做一件事情时，因为这件事情会花费很长时间，在做这件事的同时，你还可以去处理其他事情。比如做饭的异步做法，我们在烧水的同时，利用这10分钟，去切菜，炒菜。</p></li></ul><p>他们的本质区别： 这条流水线上各个流程的执行顺序不同</p><p><img src="https://www.ipicbed.com/images/2021/12/27/bom2.png" alt="bom2.png"></p><p><img src="https://www.ipicbed.com/images/2021/12/27/bom3.png" alt="bom3.png"></p><p><img src="https://www.ipicbed.com/images/2021/12/27/bom4.png" alt="bom4.png"></p><h2 id="location-对象"><a href="#location-对象" class="headerlink" title="location 对象"></a><strong>location 对象</strong></h2><p>概念：</p><p>window 对象给我们提供了一个 location 属性用于获取或设置窗体的 URL，并且可以用于解析 URL 。 因为这个属性返回的是一个对象，所以我们将这个属性也称为 location 对象。</p><ul><li><p><strong>URL</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/bom5.png" alt="bom5.png"></p></li><li><p><strong>location 对象的属性</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/bom6.png" alt="bom6.png"></p></li><li><p><strong>location 对象的方法</strong></p><p>  <img src="https://www.ipicbed.com/images/2021/12/27/bom7.png" alt="bom7.png"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 前端 </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务端渲染和客户端渲染</title>
      <link href="/posts/7.html"/>
      <url>/posts/7.html</url>
      
        <content type="html"><![CDATA[<h2 id="客户端渲染（Ajax）"><a href="#客户端渲染（Ajax）" class="headerlink" title="客户端渲染（Ajax）"></a>客户端渲染（Ajax）</h2><p>页面的局部刷新</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a><strong>优点</strong></h3><ol><li>可以向用户快速展示页面的内容，增加用户体验</li><li>给别人爬虫爬取相应的内容增加一定的困难</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a><strong>缺点</strong></h3><ol><li>可能需要向服务器请求多次数据</li><li>不利于SEO 搜索引擎优化，即百度、搜狗等搜索引擎搜索不到客户端渲染的数据</li></ol><h2 id="服务端渲染（NodeJs）"><a href="#服务端渲染（NodeJs）" class="headerlink" title="服务端渲染（NodeJs）"></a>服务端渲染（NodeJs）</h2><p>整个页面的刷新</p><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a><strong>优点</strong></h3><ol><li>可以向用户快速展示页面的内容，增加用户体验</li><li>给别人爬虫爬取相应的内容增加一定的困难</li></ol><h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a><strong>缺点</strong></h3><ol><li>可能需要向服务器请求多次数据</li><li>不利于SEO 搜索引擎优化，即百度、搜狗等搜索引擎搜索不到客户端渲染的数据</li></ol><h2 id="区分客户端渲染和服务端渲染"><a href="#区分客户端渲染和服务端渲染" class="headerlink" title="区分客户端渲染和服务端渲染"></a>区分客户端渲染和服务端渲染</h2><ul><li>网页源代码中没有动态数据的，是客户端渲染；（例子：京东的商品评论，局部刷新）</li><li>网页源代码中有数据的，是服务端渲染；（例子：京东商品分类，网址发生改变）</li></ul><p>参考知乎文章：<a href="https://zhuanlan.zhihu.com/p/171579801">客户端渲染和服务器渲染的区别</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NodeJs</title>
      <link href="/posts/6.html"/>
      <url>/posts/6.html</url>
      
        <content type="html"><![CDATA[<h1 id="关于nodejs"><a href="#关于nodejs" class="headerlink" title="关于nodejs"></a>关于nodejs</h1><p><a href="https://www.runoob.com/nodejs/nodejs-tutorial.html">Node.js 教程</a></p><ul><li><p>如果你是一个前端程序员，你不懂得像PHP、Python或Ruby等动态编程语言，然后你想创建自己的服务，那么Node.js是一个非常好的选择。</p></li><li><p>Node.js 是运行在服务端的 JavaScript，如果你熟悉Javascript，那么你将会很容易的学会Node.js。</p></li><li><p>当然，如果你是后端程序员，想部署一些高性能的服务，那么学习Node.js也是一个非常好的选择。</p></li></ul><h1 id="Node介绍"><a href="#Node介绍" class="headerlink" title="Node介绍"></a>Node介绍</h1><h2 id="为什么要学习Node-js"><a href="#为什么要学习Node-js" class="headerlink" title="为什么要学习Node.js"></a>为什么要学习Node.js</h2><ul><li>企业需求<ul><li>具有服务端开发经验更改</li><li>front-end</li><li>back-end</li><li>全栈开发工程师</li><li>基本的网站开发能力<ul><li>服务端</li><li>前端</li><li>运维部署</li></ul></li><li>多人社区</li></ul></li></ul><h2 id="Node-js是什么"><a href="#Node-js是什么" class="headerlink" title="Node.js是什么"></a>Node.js是什么</h2><ul><li>Node.js是JavaScript 运行时</li><li>通俗易懂的讲，Node.js是JavaScript的运行平台</li><li>Node.js既不是语言，也不是框架，它是一个平台</li><li>浏览器中的JavaScript<ul><li>EcmaScript<ul><li>基本语法</li><li>if</li><li>var</li><li>function</li><li>Object</li><li>Array</li></ul></li><li>Bom</li><li>Dom</li></ul></li><li>Node.js中的JavaScript<ul><li>没有Bom，Dom</li><li>EcmaScript</li><li>在Node中这个JavaScript执行环境为JavaScript提供了一些服务器级别的API<ul><li>例如文件的读写</li><li>网络服务的构建</li><li>网络通信</li><li>http服务器</li></ul></li></ul></li><li>构建与Chrome的V8引擎之上<ul><li>代码只是具有特定格式的字符串</li><li>引擎可以认识它，帮你解析和执行</li><li>Google Chrome的V8引擎是目前公认的解析执行JavaScript代码最快的</li><li>Node.js的作者把Google Chrome中的V8引擎移植出来，开发了一个独立的JavaScript运行时环境</li></ul></li><li>Node.js uses an envent-driven,non-blocking I/O mode that makes it lightweight and efficent.<ul><li>envent-driven 事件驱动</li><li>non-blocking I/O mode 非阻塞I/O模型（异步）</li><li>ightweight and efficent. 轻量和高效</li></ul></li><li>Node.js package ecosystem,npm,is the larget scosystem of open sourcr libraries in the world<ul><li>npm 是世界上最大的开源生态系统</li><li>绝大多数JavaScript相关的包都存放在npm上，这样做的目的是为了让开发人员更方便的去下载使用</li><li>npm install jquery</li></ul></li></ul><h2 id="Node能做什么"><a href="#Node能做什么" class="headerlink" title="Node能做什么"></a>Node能做什么</h2><ul><li>web服务器后台</li><li>命令行工具<ul><li>npm(node)</li><li>git(c语言)</li><li>hexo（node）</li><li>…</li></ul></li><li>对于前端工程师来讲，接触最多的是它的命令行工具<ul><li>自己写的很少，主要是用别人第三方的</li><li>webpack</li><li>gulp</li><li>npm</li></ul></li></ul><p>参考：<a href="https://substantial-jumpsuit-8b1.notion.site/nodeJS-e4c603453af6472f90a6b5ca126091fd">李鹏周老师的笔记</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 前端 </tag>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决art-Template前后端语法冲突问题</title>
      <link href="/posts/5.html"/>
      <url>/posts/5.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言：art-template-是一个简约、超快的模板引擎。"><a href="#前言：art-template-是一个简约、超快的模板引擎。" class="headerlink" title="前言：art-template 是一个简约、超快的模板引擎。"></a>前言：art-template 是一个简约、超快的模板引擎。</h3><p>它采用作用域预声明的技术来优化模板渲染速度，从而获得接近 JavaScript 极限的运行性能，并且同时支持 NodeJS 和浏览器。</p><p><a href="http://aui.github.io/art-template/zh-cn/index.html">art-Template官网文档</a></p><h3 id="模板语法："><a href="#模板语法：" class="headerlink" title="模板语法："></a>模板语法：</h3><p><img src="https://www.ipicbed.com/images/2021/12/25/05-img-01.png" alt="05-img-01.png"></p><h3 id="问题：ajax请求后获取到后台传来的数据，在使用模板引擎渲染到页面上。但是渲染出来的是空白数据，没有报错，起初以为是template-web-js的引入有问题。"><a href="#问题：ajax请求后获取到后台传来的数据，在使用模板引擎渲染到页面上。但是渲染出来的是空白数据，没有报错，起初以为是template-web-js的引入有问题。" class="headerlink" title="问题：ajax请求后获取到后台传来的数据，在使用模板引擎渲染到页面上。但是渲染出来的是空白数据，没有报错，起初以为是template-web.js的引入有问题。"></a>问题：ajax请求后获取到后台传来的数据，在使用模板引擎渲染到页面上。但是渲染出来的是空白数据，没有报错，起初以为是template-web.js的引入有问题。</h3><p><font color="chocolate">⚠️ 在 art-template 的使用中，它存在前后端冲突的问题，所以它只会接受服务端传过来的数据</font></p><h2 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h2><ol><li><p>找到项目中 node_module 下的 art-template 中的 lib /compile 下的 default.js 文件<br>目录结构如图所示</p><p> <img src="https://img-blog.csdnimg.cn/20200605075510975.png#pic_center"></p></li><li><p>其中，将 rules: [navtiveRule, artRule] 中的 navtiveRule 删除</p><p> <img src="https://img-blog.csdnimg.cn/20200605075612846.png#pic_center"></p></li><li><p>之后服务端只能解析 被 <strong><em>{ { } }</em></strong> 包起来的内容，而浏览器端只能使用 <strong><em>&lt;%= %&gt;</em></strong> 语法进行编译</p></li></ol><h2 id="详见大佬解释"><a href="#详见大佬解释" class="headerlink" title="详见大佬解释"></a>详见大佬解释</h2><p><a href="https://blog.csdn.net/u013263917/article/details/78450780?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-1.highlightwordscore&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-1.highlightwordscore">nodejs中art-template模板语法冲突解决方案_坤小的专栏-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 前端 </tag>
            
            <tag> artTemplate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用vscode将项目发布到github上</title>
      <link href="/posts/4.html"/>
      <url>/posts/4.html</url>
      
        <content type="html"><![CDATA[<h2 id="先初始化存储库"><a href="#先初始化存储库" class="headerlink" title="先初始化存储库"></a>先初始化存储库</h2><p><img src="https://www.ipicbed.com/images/2021/12/25/04-img-01.png" alt="04-img-01.png"></p><h2 id="提交更改"><a href="#提交更改" class="headerlink" title="提交更改"></a>提交更改</h2><p>会显示要username和email</p><p>控制台输入</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config user.name <span class="token string">'github的用户名'</span><span class="token function">git</span> config user.email <span class="token string">'github的邮箱'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="在github上创建新的库"><a href="#在github上创建新的库" class="headerlink" title="在github上创建新的库"></a>在github上创建新的库</h2><h2 id="点击左上角的三个点，推送"><a href="#点击左上角的三个点，推送" class="headerlink" title="点击左上角的三个点，推送"></a>点击左上角的三个点，推送</h2><p><img src="https://www.ipicbed.com/images/2021/12/25/04-img-02.png" alt="04-img-02.png"></p><h2 id="选择新创建的库"><a href="#选择新创建的库" class="headerlink" title="选择新创建的库"></a>选择新创建的库</h2><p><img src="https://www.ipicbed.com/images/2021/12/25/04-img-03.png" alt="04-img-03.png"></p><p>中途可能会网路不稳定，多试几次</p><p>成功后点击以下按钮，也要多试几次</p><p><img src="https://www.ipicbed.com/images/2021/12/25/04-img-04.png" alt="04-img-04.png"></p><p>然后就成功。</p><hr><h2 id="旧项目添加新分支推送"><a href="#旧项目添加新分支推送" class="headerlink" title="旧项目添加新分支推送"></a>旧项目添加新分支推送</h2><h3 id="把项目克隆到本地，把新的文件覆盖旧的文件，然后创建新的分支，再提交。"><a href="#把项目克隆到本地，把新的文件覆盖旧的文件，然后创建新的分支，再提交。" class="headerlink" title="把项目克隆到本地，把新的文件覆盖旧的文件，然后创建新的分支，再提交。"></a>把项目克隆到本地，把新的文件覆盖旧的文件，然后创建新的分支，再提交。</h3>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 前端 </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于个人图床问题</title>
      <link href="/posts/2.html"/>
      <url>/posts/2.html</url>
      
        <content type="html"><![CDATA[<p>在网上看到的搭建图床的教程或者使用免费的图床网站。</p><h2 id="免费的图床网站"><a href="#免费的图床网站" class="headerlink" title="免费的图床网站"></a>免费的图床网站</h2><ul><li><p>免费的图床网站主要有<a href="https://www.qiniu.com/">七牛云</a>、<a href="https://imgchr.com/">路过图床</a>、<a href="https://www.superbed.cn/">聚合图床</a>、<a href="https://imgur.loukky.com/home/multiple">公益图床</a>等。</p><blockquote><h3 id="路过图床"><a href="#路过图床" class="headerlink" title="路过图床"></a><a href="https://imgchr.com/">路过图床</a></h3><ul><li>路过图床注意有一些注意事项，如果出现违规的图片就会封IP，不给上传新的图片。<h3 id="公益图床"><a href="#公益图床" class="headerlink" title="公益图床"></a><a href="https://imgur.loukky.com/home/multiple">公益图床</a></h3></li><li>公益图床因为没有用户系统，所以不能管理已上传的图片，也就是说每次上传完之后都要备份好上传后的域名，十分麻烦。</li></ul></blockquote></li></ul><h2 id="自己搭建图床"><a href="#自己搭建图床" class="headerlink" title="自己搭建图床"></a>自己搭建图床</h2><ul><li>一般使用github或者gitee来搭建<blockquote><h3 id="使用github搭建"><a href="#使用github搭建" class="headerlink" title="使用github搭建"></a>使用github搭建</h3><ul><li>搭建前需要准备一个github账号，下载一个PicGo的软件。</li><li>PpicGo设置如下<img src="https://imgs.loukky.com/imgs/2021/12/c314041f773dfda0.png"><blockquote><ol><li><strong>仓库名</strong>是github新建的一个仓库，具体操作自行百度</li><li><strong>分支名</strong>是仓库的分支<img src="https://imgs.loukky.com/imgs/2021/12/192c1bb2b95faf35.png"></li><li><strong>Token</strong>是密钥，这个也自行百度</li><li><strong>指定存储路径</strong>是仓库里的文件夹路径，不设置的话默认放在仓库的根目录下，如需设置，格式为**<em>xxx/**</em>（例如：img/）。</li><li><strong>自定义域名</strong>是设置图片上传成功后，能直接访问的域名。格式一般为：**<em><a href="https://xxx.com/">https://xxx.com/</a>**</em></li></ol></blockquote></li></ul></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>capstone实作</title>
      <link href="/posts/3.html"/>
      <url>/posts/3.html</url>
      
        <content type="html"><![CDATA[<h2 id="基于nodejs的响应式校园订餐系统"><a href="#基于nodejs的响应式校园订餐系统" class="headerlink" title="基于nodejs的响应式校园订餐系统"></a>基于nodejs的响应式校园订餐系统</h2><h2 id="项目需求：校园点餐系统"><a href="#项目需求：校园点餐系统" class="headerlink" title="项目需求：校园点餐系统"></a>项目需求：校园点餐系统</h2><ol><li>项目运行展示首页，自动查询目前未使用的餐桌</li><li>首页需求</li></ol><ul><li> 可根据餐桌名称和餐桌的使用状态查找餐桌</li><li> 点击餐桌名称，进入菜单页面占位——加入商品到购物车——下单</li></ul><ol start="3"><li>菜单页功能</li></ol><ul><li> 占位——改变餐桌状态为正在使用，记录开始使用的时间</li><li> 取消占位——改变餐桌状态为未使用</li><li> 购物车——加入商品到购物车，购物车商品数量修改及删除</li><li> 下单——删除当前餐桌中购物车中商品，保存订单信息到数据库</li><li> 付款——下单后可取消订单或付款，同时餐桌的状态改为未使用</li></ul><ol start="4"><li>登录和注册   filter / cookies</li></ol><ul><li> 登录拦截器——要求3内的功能都需登录才可操作                </li><li> 记住密码 cookie。</li><li> 注册： 帐号 姓名 密码 地址 手机</li><li> 登录： 帐号 密码 </li></ul><h2 id="github地址"><a href="#github地址" class="headerlink" title="github地址"></a>github地址</h2><p><a href="https://github.com/zfengChen/OrderSystem.git">https://github.com/zfengChen/OrderSystem.git</a></p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 前端 </tag>
            
            <tag> nodejs </tag>
            
            <tag> mongodb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇博文</title>
      <link href="/posts/1.html"/>
      <url>/posts/1.html</url>
      
        <content type="html"><![CDATA[<p>我欲乘风归去，又恐琼楼玉宇，高处不胜寒。</p><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><p>使用hexo搭配nodejs搭建一个个人博客，主题使用的是Butterfly，经过某位大佬改装。</p><h2 id="博客的挂载"><a href="#博客的挂载" class="headerlink" title="博客的挂载"></a>博客的挂载</h2><p>个人博客挂载在github上</p><h2 id="文章语法"><a href="#文章语法" class="headerlink" title="文章语法"></a>文章语法</h2><p>使用Markdown语法</p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p><img src="https://cdn.jsdelivr.net/gh/zhaoze-jpg/Xianqi@main/imgg/9.webp" alt="图片"></p><h2 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h2><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=446935665&amp;auto=0&amp;height=66"></iframe>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 想法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
